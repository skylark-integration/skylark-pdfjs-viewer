{"version":3,"sources":["base_tree_viewer.js"],"names":["define","pdfjsLib","removeNullCharacters","TREEITEM_OFFSET_TOP","TREEITEM_SELECTED_CLASS","BaseTreeViewer","[object Object]","options","this","constructor","Error","container","eventBus","reset","_pdfDocument","_lastToggleIsShow","_currentTreeItem","textContent","classList","remove","count","element","params","str","div","hidden","toggler","document","createElement","className","add","onclick","evt","stopPropagation","toggle","shiftKey","shouldShowAll","contains","_toggleTreeItem","insertBefore","firstChild","root","show","querySelectorAll","fragment","hasAnyNesting","querySelector","appendChild","_dispatchEvent","treeItem","currentNode","parentNode","firstElementChild","_updateCurrentTreeItem","scrollTo","offsetLeft","offsetTop"],"mappings":";;;;;;;AAAAA,QACE,yBACA,SAASC,GAiBT,MAAMC,qBAAEA,GAAyBD,EAE3BE,GAAuB,IACvBC,EAA0B,iBAE1BC,EACJC,YAAYC,GACV,GAAIC,KAAKC,cAAgBJ,EACvB,MAAM,IAAIK,MAAM,qCAElBF,KAAKG,UAAYJ,EAAQI,UACzBH,KAAKI,SAAWL,EAAQK,SAExBJ,KAAKK,QAGPP,QACEE,KAAKM,aAAe,KACpBN,KAAKO,mBAAoB,EACzBP,KAAKQ,iBAAmB,KAGxBR,KAAKG,UAAUM,YAAc,GAG7BT,KAAKG,UAAUO,UAAUC,OAAO,uBAMlCb,eAAec,GACb,MAAM,IAAIV,MAAM,mCAMlBJ,UAAUe,EAASC,GACjB,MAAM,IAAIZ,MAAM,8BAMlBJ,sBAAsBiB,GACpB,OAAOrB,EAAqBqB,IAAwB,IAQtDjB,iBAAiBkB,EAAKC,GAAS,GAC7B,MAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAY,kBAChBJ,GACFC,EAAQR,UAAUY,IAAI,mBAExBJ,EAAQK,QAAUC,CAAAA,IAIhB,GAHAA,EAAIC,kBACJP,EAAQR,UAAUgB,OAAO,mBAErBF,EAAIG,SAAU,CAChB,MAAMC,GAAiBV,EAAQR,UAAUmB,SAAS,mBAClD7B,KAAK8B,gBAAgBd,EAAKY,MAG9BZ,EAAIe,aAAab,EAASF,EAAIgB,YAWhClC,gBAAgBmC,EAAMC,GAAO,GAC3BlC,KAAKO,kBAAoB2B,EACzB,IAAK,MAAMhB,KAAWe,EAAKE,iBAAiB,oBAC1CjB,EAAQR,UAAUgB,OAAO,mBAAoBQ,GAQjDpC,sBACEE,KAAK8B,gBAAgB9B,KAAKG,WAAYH,KAAKO,mBAM7CT,iBAAiBsC,EAAUxB,EAAOyB,GAAgB,GAC5CA,IACFrC,KAAKG,UAAUO,UAAUY,IAAI,uBAE7BtB,KAAKO,mBAAqB6B,EAASE,cAAc,qBAEnDtC,KAAKG,UAAUoC,YAAYH,GAE3BpC,KAAKwC,eAAe5B,GAGtBd,OAAOgB,GACL,MAAM,IAAIZ,MAAM,2BAMlBJ,uBAAuB2C,EAAW,MAC5BzC,KAAKQ,mBAEPR,KAAKQ,iBAAiBE,UAAUC,OAAOf,GACvCI,KAAKQ,iBAAmB,MAEtBiC,IACFA,EAAS/B,UAAUY,IAAI1B,GACvBI,KAAKQ,iBAAmBiC,GAO5B3C,yBAAyB2C,GACvB,IAAKA,EACH,OAIF,IAAIC,EAAcD,EAASE,WAC3B,KAAOD,GAAeA,IAAgB1C,KAAKG,WAAW,CACpD,GAAIuC,EAAYhC,UAAUmB,SAAS,YAAa,CAC9C,MAAMX,EAAUwB,EAAYE,kBAE5B1B,GAAWA,EAAQR,UAAUC,OAAO,mBAEtC+B,EAAcA,EAAYC,WAE5B3C,KAAK6C,uBAAuBJ,GAE5BzC,KAAKG,UAAU2C,SACbL,EAASM,WACTN,EAASO,UAAYrD,IAK3B,OAASE,eAAAA","file":"../base_tree_viewer.js","sourcesContent":["define([\n  \"skylark-pdfjs-display\"\n],function(pdfjsLib){\n\n  /* Copyright 2020 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { removeNullCharacters } = pdfjsLib;\n\n  const TREEITEM_OFFSET_TOP = -100; // px\n  const TREEITEM_SELECTED_CLASS = \"selected\";\n\n  class BaseTreeViewer {\n    constructor(options) {\n      if (this.constructor === BaseTreeViewer) {\n        throw new Error(\"Cannot initialize BaseTreeViewer.\");\n      }\n      this.container = options.container;\n      this.eventBus = options.eventBus;\n\n      this.reset();\n    }\n\n    reset() {\n      this._pdfDocument = null;\n      this._lastToggleIsShow = true;\n      this._currentTreeItem = null;\n\n      // Remove the tree from the DOM.\n      this.container.textContent = \"\";\n      // Ensure that the left (right in RTL locales) margin is always reset,\n      // to prevent incorrect tree alignment if a new document is opened.\n      this.container.classList.remove(\"treeWithDeepNesting\");\n    }\n\n    /**\n     * @private\n     */\n    _dispatchEvent(count) {\n      throw new Error(\"Not implemented: _dispatchEvent\");\n    }\n\n    /**\n     * @private\n     */\n    _bindLink(element, params) {\n      throw new Error(\"Not implemented: _bindLink\");\n    }\n\n    /**\n     * @private\n     */\n    _normalizeTextContent(str) {\n      return removeNullCharacters(str) || /* en dash = */ \"\\u2013\";\n    }\n\n    /**\n     * Prepend a button before a tree item which allows the user to collapse or\n     * expand all tree items at that level; see `_toggleTreeItem`.\n     * @private\n     */\n    _addToggleButton(div, hidden = false) {\n      const toggler = document.createElement(\"div\");\n      toggler.className = \"treeItemToggler\";\n      if (hidden) {\n        toggler.classList.add(\"treeItemsHidden\");\n      }\n      toggler.onclick = evt => {\n        evt.stopPropagation();\n        toggler.classList.toggle(\"treeItemsHidden\");\n\n        if (evt.shiftKey) {\n          const shouldShowAll = !toggler.classList.contains(\"treeItemsHidden\");\n          this._toggleTreeItem(div, shouldShowAll);\n        }\n      };\n      div.insertBefore(toggler, div.firstChild);\n    }\n\n    /**\n     * Collapse or expand the subtree of a tree item.\n     *\n     * @param {Element} root - the root of the item (sub)tree.\n     * @param {boolean} show - whether to show the item (sub)tree. If false,\n     *   the item subtree rooted at `root` will be collapsed.\n     * @private\n     */\n    _toggleTreeItem(root, show = false) {\n      this._lastToggleIsShow = show;\n      for (const toggler of root.querySelectorAll(\".treeItemToggler\")) {\n        toggler.classList.toggle(\"treeItemsHidden\", !show);\n      }\n    }\n\n    /**\n     * Collapse or expand all subtrees of the `container`.\n     * @private\n     */\n    _toggleAllTreeItems() {\n      this._toggleTreeItem(this.container, !this._lastToggleIsShow);\n    }\n\n    /**\n     * @private\n     */\n    _finishRendering(fragment, count, hasAnyNesting = false) {\n      if (hasAnyNesting) {\n        this.container.classList.add(\"treeWithDeepNesting\");\n\n        this._lastToggleIsShow = !fragment.querySelector(\".treeItemsHidden\");\n      }\n      this.container.appendChild(fragment);\n\n      this._dispatchEvent(count);\n    }\n\n    render(params) {\n      throw new Error(\"Not implemented: render\");\n    }\n\n    /**\n     * @private\n     */\n    _updateCurrentTreeItem(treeItem = null) {\n      if (this._currentTreeItem) {\n        // Ensure that the current treeItem-selection is always removed.\n        this._currentTreeItem.classList.remove(TREEITEM_SELECTED_CLASS);\n        this._currentTreeItem = null;\n      }\n      if (treeItem) {\n        treeItem.classList.add(TREEITEM_SELECTED_CLASS);\n        this._currentTreeItem = treeItem;\n      }\n    }\n\n    /**\n     * @private\n     */\n    _scrollToCurrentTreeItem(treeItem) {\n      if (!treeItem) {\n        return;\n      }\n      // Ensure that the treeItem is *fully* expanded, such that it will first of\n      // all be visible and secondly that scrolling it into view works correctly.\n      let currentNode = treeItem.parentNode;\n      while (currentNode && currentNode !== this.container) {\n        if (currentNode.classList.contains(\"treeItem\")) {\n          const toggler = currentNode.firstElementChild;\n          ///toggler?.classList.remove(\"treeItemsHidden\"); // lwf\n          toggler && toggler.classList.remove(\"treeItemsHidden\");\n        }\n        currentNode = currentNode.parentNode;\n      }\n      this._updateCurrentTreeItem(treeItem);\n\n      this.container.scrollTo(\n        treeItem.offsetLeft,\n        treeItem.offsetTop + TREEITEM_OFFSET_TOP\n      );\n    }\n  }\n\n  return { BaseTreeViewer };\n});"]}