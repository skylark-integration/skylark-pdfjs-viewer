{"version":3,"sources":["toolbar.js"],"names":["define","PDFJSDev","ui_utils","animationStarted","DEFAULT_SCALE","DEFAULT_SCALE_VALUE","MAX_SCALE","MIN_SCALE","noContextMenuHandler","NullL10n","PAGE_NUMBER_LOADING_INDICATOR","SCALE_SELECT_CONTAINER_WIDTH","SCALE_SELECT_WIDTH","Toolbar","[object Object]","options","eventBus","l10n","this","toolbar","container","buttons","element","previous","eventName","next","zoomIn","zoomOut","openFile","print","presentationModeButton","download","viewBookmark","items","numPages","pageNumber","scaleSelectContainer","scaleSelect","customScaleOption","_wasLocalized","reset","_bindListeners","pageLabel","_updateUIState","pagesCount","hasPageLabels","pageScaleValue","pageScale","toString","updateLoadingIndicatorState","self","addEventListener","evt","dispatch","source","select","value","oncontextmenu","_on","_adjustScaleWidth","resetNumPages","type","get","then","msg","textContent","max","disabled","customScale","Math","round","scale","predefinedValueFound","option","selected","loading","classList","toggle","predefinedValuesPromise","Promise","all","canvas","document","createElement","test","mozOpaque","ctx","getContext","alpha","fontSize","fontFamily","getComputedStyle","font","maxWidth","predefinedValue","width","measureText","overflow","style","height"],"mappings":"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","file":"../toolbar.js","sourcesContent":["define([\n  \"./pdfjs_dev\",\n  \"./ui_utils\"\n],function(PDFJSDev, ui_utils){\n  /* Copyright 2016 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const {\n    animationStarted,\n    DEFAULT_SCALE,\n    DEFAULT_SCALE_VALUE,\n    MAX_SCALE,\n    MIN_SCALE,\n    noContextMenuHandler,\n    NullL10n,\n  } = ui_utils;\n\n  const PAGE_NUMBER_LOADING_INDICATOR = \"visiblePageIsLoading\";\n  // Keep the two values below up-to-date with the values in `web/viewer.css`:\n  const SCALE_SELECT_CONTAINER_WIDTH = 140; // px\n  const SCALE_SELECT_WIDTH = 162; // px\n\n  /**\n   * @typedef {Object} ToolbarOptions\n   * @property {HTMLDivElement} container - Container for the secondary toolbar.\n   * @property {HTMLSpanElement} numPages - Label that contains number of pages.\n   * @property {HTMLInputElement} pageNumber - Control for display and user input\n   *   of the current page number.\n   * @property {HTMLSpanElement} scaleSelectContainer - Container where scale\n   *   controls are placed. The width is adjusted on UI initialization.\n   * @property {HTMLSelectElement} scaleSelect - Scale selection control.\n   * @property {HTMLOptionElement} customScaleOption - The item used to display\n   *   a non-predefined scale.\n   * @property {HTMLButtonElement} previous - Button to go to the previous page.\n   * @property {HTMLButtonElement} next - Button to go to the next page.\n   * @property {HTMLButtonElement} zoomIn - Button to zoom in the pages.\n   * @property {HTMLButtonElement} zoomOut - Button to zoom out the pages.\n   * @property {HTMLButtonElement} viewFind - Button to open find bar.\n   * @property {HTMLButtonElement} openFile - Button to open a new document.\n   * @property {HTMLButtonElement} presentationModeButton - Button to switch to\n   *   presentation mode.\n   * @property {HTMLButtonElement} download - Button to download the document.\n   * @property {HTMLAElement} viewBookmark - Element to link current url of\n   *   the page view.\n   */\n\n  class Toolbar {\n    /**\n     * @param {ToolbarOptions} options\n     * @param {EventBus} eventBus\n     * @param {IL10n} l10n - Localization service.\n     */\n    constructor(options, eventBus, l10n = NullL10n) {\n      this.toolbar = options.container;\n      this.eventBus = eventBus;\n      this.l10n = l10n;\n      this.buttons = [\n        { element: options.previous, eventName: \"previouspage\" },\n        { element: options.next, eventName: \"nextpage\" },\n        { element: options.zoomIn, eventName: \"zoomin\" },\n        { element: options.zoomOut, eventName: \"zoomout\" },\n        { element: options.openFile, eventName: \"openfile\" },\n        { element: options.print, eventName: \"print\" },\n        {\n          element: options.presentationModeButton,\n          eventName: \"presentationmode\",\n        },\n        { element: options.download, eventName: \"download\" },\n        { element: options.viewBookmark, eventName: null },\n      ];\n      this.items = {\n        numPages: options.numPages,\n        pageNumber: options.pageNumber,\n        scaleSelectContainer: options.scaleSelectContainer,\n        scaleSelect: options.scaleSelect,\n        customScaleOption: options.customScaleOption,\n        previous: options.previous,\n        next: options.next,\n        zoomIn: options.zoomIn,\n        zoomOut: options.zoomOut,\n      };\n\n      this._wasLocalized = false;\n      this.reset();\n\n      // Bind the event listeners for click and various other actions.\n      this._bindListeners();\n    }\n\n    setPageNumber(pageNumber, pageLabel) {\n      this.pageNumber = pageNumber;\n      this.pageLabel = pageLabel;\n      this._updateUIState(false);\n    }\n\n    setPagesCount(pagesCount, hasPageLabels) {\n      this.pagesCount = pagesCount;\n      this.hasPageLabels = hasPageLabels;\n      this._updateUIState(true);\n    }\n\n    setPageScale(pageScaleValue, pageScale) {\n      this.pageScaleValue = (pageScaleValue || pageScale).toString();\n      this.pageScale = pageScale;\n      this._updateUIState(false);\n    }\n\n    reset() {\n      this.pageNumber = 0;\n      this.pageLabel = null;\n      this.hasPageLabels = false;\n      this.pagesCount = 0;\n      this.pageScaleValue = DEFAULT_SCALE_VALUE;\n      this.pageScale = DEFAULT_SCALE;\n      this._updateUIState(true);\n      this.updateLoadingIndicatorState();\n    }\n\n    _bindListeners() {\n      const { pageNumber, scaleSelect } = this.items;\n      const self = this;\n\n      // The buttons within the toolbar.\n      for (const { element, eventName } of this.buttons) {\n        element.addEventListener(\"click\", evt => {\n          if (eventName !== null) {\n            this.eventBus.dispatch(eventName, { source: this });\n          }\n        });\n      }\n      // The non-button elements within the toolbar.\n      pageNumber.addEventListener(\"click\", function () {\n        this.select();\n      });\n      pageNumber.addEventListener(\"change\", function () {\n        self.eventBus.dispatch(\"pagenumberchanged\", {\n          source: self,\n          value: this.value,\n        });\n      });\n\n      scaleSelect.addEventListener(\"change\", function () {\n        if (this.value === \"custom\") {\n          return;\n        }\n        self.eventBus.dispatch(\"scalechanged\", {\n          source: self,\n          value: this.value,\n        });\n      });\n      // Suppress context menus for some controls.\n      scaleSelect.oncontextmenu = noContextMenuHandler;\n\n      this.eventBus._on(\"localized\", () => {\n        this._wasLocalized = true;\n        this._adjustScaleWidth();\n        this._updateUIState(true);\n      });\n    }\n\n    _updateUIState(resetNumPages = false) {\n      if (!this._wasLocalized) {\n        // Don't update the UI state until we localize the toolbar.\n        return;\n      }\n      const { pageNumber, pagesCount, pageScaleValue, pageScale, items } = this;\n\n      if (resetNumPages) {\n        if (this.hasPageLabels) {\n          items.pageNumber.type = \"text\";\n        } else {\n          items.pageNumber.type = \"number\";\n          this.l10n\n            .get(\"of_pages\", { pagesCount }, \"of {{pagesCount}}\")\n            .then(msg => {\n              items.numPages.textContent = msg;\n            });\n        }\n        items.pageNumber.max = pagesCount;\n      }\n\n      if (this.hasPageLabels) {\n        items.pageNumber.value = this.pageLabel;\n        this.l10n\n          .get(\n            \"page_of_pages\",\n            { pageNumber, pagesCount },\n            \"({{pageNumber}} of {{pagesCount}})\"\n          )\n          .then(msg => {\n            items.numPages.textContent = msg;\n          });\n      } else {\n        items.pageNumber.value = pageNumber;\n      }\n\n      items.previous.disabled = pageNumber <= 1;\n      items.next.disabled = pageNumber >= pagesCount;\n\n      items.zoomOut.disabled = pageScale <= MIN_SCALE;\n      items.zoomIn.disabled = pageScale >= MAX_SCALE;\n\n      const customScale = Math.round(pageScale * 10000) / 100;\n      this.l10n\n        .get(\"page_scale_percent\", { scale: customScale }, \"{{scale}}%\")\n        .then(msg => {\n          let predefinedValueFound = false;\n          for (const option of items.scaleSelect.options) {\n            if (option.value !== pageScaleValue) {\n              option.selected = false;\n              continue;\n            }\n            option.selected = true;\n            predefinedValueFound = true;\n          }\n          if (!predefinedValueFound) {\n            items.customScaleOption.textContent = msg;\n            items.customScaleOption.selected = true;\n          }\n        });\n    }\n\n    updateLoadingIndicatorState(loading = false) {\n      const pageNumberInput = this.items.pageNumber;\n\n      pageNumberInput.classList.toggle(PAGE_NUMBER_LOADING_INDICATOR, loading);\n    }\n\n    /**\n     * Increase the width of the zoom dropdown DOM element if, and only if, it's\n     * too narrow to fit the *longest* of the localized strings.\n     * @private\n     */\n    async _adjustScaleWidth() {\n      const { items, l10n } = this;\n\n      const predefinedValuesPromise = Promise.all([\n        l10n.get(\"page_scale_auto\", null, \"Automatic Zoom\"),\n        l10n.get(\"page_scale_actual\", null, \"Actual Size\"),\n        l10n.get(\"page_scale_fit\", null, \"Page Fit\"),\n        l10n.get(\"page_scale_width\", null, \"Page Width\"),\n      ]);\n\n      // The temporary canvas is used to measure text length in the DOM.\n      let canvas = document.createElement(\"canvas\");\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n      ) {\n        canvas.mozOpaque = true;\n      }\n      let ctx = canvas.getContext(\"2d\", { alpha: false });\n\n      await animationStarted;\n      const { fontSize, fontFamily } = getComputedStyle(items.scaleSelect);\n      ctx.font = `${fontSize} ${fontFamily}`;\n\n      let maxWidth = 0;\n      for (const predefinedValue of await predefinedValuesPromise) {\n        const { width } = ctx.measureText(predefinedValue);\n        if (width > maxWidth) {\n          maxWidth = width;\n        }\n      }\n      const overflow = SCALE_SELECT_WIDTH - SCALE_SELECT_CONTAINER_WIDTH;\n      maxWidth += 2 * overflow;\n\n      if (maxWidth > SCALE_SELECT_CONTAINER_WIDTH) {\n        items.scaleSelect.style.width = `${maxWidth + overflow}px`;\n        items.scaleSelectContainer.style.width = `${maxWidth}px`;\n      }\n      // Zeroing the width and height cause Firefox to release graphics resources\n      // immediately, which can greatly reduce memory consumption.\n      canvas.width = 0;\n      canvas.height = 0;\n      canvas = ctx = null;\n    }\n  }\n\n  return { Toolbar };\n});"]}