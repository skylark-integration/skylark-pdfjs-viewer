{"version":3,"sources":["preferences.js"],"names":["define","app_options","AppOptions","OptionKind","BasePreferences","[object Object]","this","constructor","Error","Object","defineProperty","value","freeze","PDFJSDev","test","json","getAll","PREFERENCE","writable","enumerable","configurable","prefs","assign","create","defaults","_initializedPromise","_readFromStorage","then","name","defaultValue","prefValue","undefined","prefObj","_writeToStorage","valueType","defaultType","toString","Number","isInteger"],"mappings":";;;;;;;AAAAA,QAEE,iBACA,SAASC,GAgBT,MAAMC,WAAEA,EAAUC,WAAEA,GAAgBF,QAO9BG,EACJC,cACE,GAAIC,KAAKC,cAAgBH,EACvB,MAAM,IAAII,MAAM,sCAElBC,OAAOC,eAAeJ,KAAM,YAC1BK,MAAOF,OAAOG,OACQ,oBAAbC,UAA6BA,SAASC,KAAK,cAE9CD,SAASE,KAAK,wCADdb,EAAWc,OAAOb,EAAWc,aAGnCC,UAAU,EACVC,YAAY,EACZC,cAAc,IAEhBd,KAAKe,MAAQZ,OAAOa,OAAOb,OAAOc,OAAO,MAAOjB,KAAKkB,UAErDlB,KAAKmB,oBAAsBnB,KAAKoB,iBAAiBpB,KAAKkB,UAAUG,KAC9DN,IACE,GAAKA,EAGL,IAAK,MAAMO,KAAQP,EAAO,CACxB,MAAMQ,EAAevB,KAAKkB,SAASI,GACjCE,EAAYT,EAAMO,QAIDG,IAAjBF,UACOC,UAAqBD,IAI9BvB,KAAKe,MAAMO,GAAQE,MAY3BzB,sBAAsB2B,GACpB,MAAM,IAAIxB,MAAM,oCASlBH,uBAAuB2B,GACrB,MAAM,IAAIxB,MAAM,qCAQlBH,cAGE,aAFMC,KAAKmB,oBACXnB,KAAKe,MAAQZ,OAAOa,OAAOb,OAAOc,OAAO,MAAOjB,KAAKkB,UAC9ClB,KAAK2B,gBAAgB3B,KAAKkB,UAUnCnB,UAAUuB,EAAMjB,SACRL,KAAKmB,oBACX,MAAMI,EAAevB,KAAKkB,SAASI,GAEnC,QAAqBG,IAAjBF,EACF,MAAM,IAAIrB,0BAA0BoB,oBAC/B,QAAcG,IAAVpB,EACT,MAAM,IAAIH,MAAM,0CAElB,MAAM0B,SAAmBvB,EACnBwB,SAAqBN,EAE3B,GAAIK,IAAcC,EAAa,CAC7B,GAAkB,WAAdD,GAA0C,WAAhBC,EAG5B,MAAM,IAAI3B,0BACYG,WAAeuB,oBACnBC,MAJlBxB,EAAQA,EAAMyB,gBAQhB,GAAkB,WAAdF,IAA2BG,OAAOC,UAAU3B,GAC9C,MAAM,IAAIH,0BAA0BG,0BAIxC,OADAL,KAAKe,MAAMO,GAAQjB,EACZL,KAAK2B,gBAAgB3B,KAAKe,OASnChB,UAAUuB,SACFtB,KAAKmB,oBACX,MAAMI,EAAevB,KAAKkB,SAASI,GAEnC,QAAqBG,IAAjBF,EACF,MAAM,IAAIrB,0BAA0BoB,oBAC/B,CACL,MAAME,EAAYxB,KAAKe,MAAMO,GAE7B,QAAkBG,IAAdD,EACF,OAAOA,EAGX,OAAOD,EAQTxB,eAEE,aADMC,KAAKmB,oBACJhB,OAAOa,OAAOb,OAAOc,OAAO,MAAOjB,KAAKkB,SAAUlB,KAAKe,QAIlE,OAASjB,gBAAAA","file":"../preferences.js","sourcesContent":["define([\n\n  \"./app_options\"\n],function(app_options){\n  /* Copyright 2013 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { AppOptions, OptionKind } =  app_options;\n\n  /**\n   * BasePreferences - Abstract base class for storing persistent settings.\n   *   Used for settings that should be applied to all opened documents,\n   *   or every time the viewer is loaded.\n   */\n  class BasePreferences {\n    constructor() {\n      if (this.constructor === BasePreferences) {\n        throw new Error(\"Cannot initialize BasePreferences.\");\n      }\n      Object.defineProperty(this, \"defaults\", {\n        value: Object.freeze(\n          typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")\n            ? AppOptions.getAll(OptionKind.PREFERENCE)\n            : PDFJSDev.json(\"$ROOT/build/default_preferences.json\")\n        ),\n        writable: false,\n        enumerable: true,\n        configurable: false,\n      });\n      this.prefs = Object.assign(Object.create(null), this.defaults);\n\n      this._initializedPromise = this._readFromStorage(this.defaults).then(\n        prefs => {\n          if (!prefs) {\n            return;\n          }\n          for (const name in prefs) {\n            const defaultValue = this.defaults[name],\n              prefValue = prefs[name];\n            // Ignore preferences not present in, or whose types don't match,\n            // the default values.\n            if (\n              defaultValue === undefined ||\n              typeof prefValue !== typeof defaultValue\n            ) {\n              continue;\n            }\n            this.prefs[name] = prefValue;\n          }\n        }\n      );\n    }\n\n    /**\n     * Stub function for writing preferences to storage.\n     * @param {Object} prefObj The preferences that should be written to storage.\n     * @returns {Promise} A promise that is resolved when the preference values\n     *                    have been written.\n     */\n    async _writeToStorage(prefObj) {\n      throw new Error(\"Not implemented: _writeToStorage\");\n    }\n\n    /**\n     * Stub function for reading preferences from storage.\n     * @param {Object} prefObj The preferences that should be read from storage.\n     * @returns {Promise} A promise that is resolved with an {Object} containing\n     *                    the preferences that have been read.\n     */\n    async _readFromStorage(prefObj) {\n      throw new Error(\"Not implemented: _readFromStorage\");\n    }\n\n    /**\n     * Reset the preferences to their default values and update storage.\n     * @returns {Promise} A promise that is resolved when the preference values\n     *                    have been reset.\n     */\n    async reset() {\n      await this._initializedPromise;\n      this.prefs = Object.assign(Object.create(null), this.defaults);\n      return this._writeToStorage(this.defaults);\n    }\n\n    /**\n     * Set the value of a preference.\n     * @param {string} name The name of the preference that should be changed.\n     * @param {boolean|number|string} value The new value of the preference.\n     * @returns {Promise} A promise that is resolved when the value has been set,\n     *                    provided that the preference exists and the types match.\n     */\n    async set(name, value) {\n      await this._initializedPromise;\n      const defaultValue = this.defaults[name];\n\n      if (defaultValue === undefined) {\n        throw new Error(`Set preference: \"${name}\" is undefined.`);\n      } else if (value === undefined) {\n        throw new Error(\"Set preference: no value is specified.\");\n      }\n      const valueType = typeof value;\n      const defaultType = typeof defaultValue;\n\n      if (valueType !== defaultType) {\n        if (valueType === \"number\" && defaultType === \"string\") {\n          value = value.toString();\n        } else {\n          throw new Error(\n            `Set preference: \"${value}\" is a ${valueType}, ` +\n              `expected a ${defaultType}.`\n          );\n        }\n      } else {\n        if (valueType === \"number\" && !Number.isInteger(value)) {\n          throw new Error(`Set preference: \"${value}\" must be an integer.`);\n        }\n      }\n      this.prefs[name] = value;\n      return this._writeToStorage(this.prefs);\n    }\n\n    /**\n     * Get the value of a preference.\n     * @param {string} name The name of the preference whose value is requested.\n     * @returns {Promise} A promise resolved with a {boolean|number|string}\n     *                    containing the value of the preference.\n     */\n    async get(name) {\n      await this._initializedPromise;\n      const defaultValue = this.defaults[name];\n\n      if (defaultValue === undefined) {\n        throw new Error(`Get preference: \"${name}\" is undefined.`);\n      } else {\n        const prefValue = this.prefs[name];\n\n        if (prefValue !== undefined) {\n          return prefValue;\n        }\n      }\n      return defaultValue;\n    }\n\n    /**\n     * Get the values of all preferences.\n     * @returns {Promise} A promise that is resolved with an {Object} containing\n     *                    the values of all preferences.\n     */\n    async getAll() {\n      await this._initializedPromise;\n      return Object.assign(Object.create(null), this.defaults, this.prefs);\n    }\n  }\n\n  return { BasePreferences };\n});"]}