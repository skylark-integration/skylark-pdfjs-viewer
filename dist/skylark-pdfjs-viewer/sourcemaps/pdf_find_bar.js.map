{"version":3,"sources":["pdf_find_bar.js"],"names":["define","PDFJSDev","ui_utils","pdf_find_controller","FindState","NullL10n","MATCHES_COUNT_LIMIT","PDFFindBar","[object Object]","options","eventBus","l10n","this","opened","bar","toggleButton","findField","highlightAll","highlightAllCheckbox","caseSensitive","caseSensitiveCheckbox","entireWord","entireWordCheckbox","findMsg","findResultsCount","findPreviousButton","findNextButton","addEventListener","toggle","dispatchEvent","e","keyCode","target","shiftKey","close","_on","_adjustWidth","bind","updateUIState","type","findPrev","dispatch","source","query","value","phraseSearch","checked","findPrevious","state","previous","matchesCount","status","FOUND","PENDING","NOT_FOUND","get","WRAPPED","setAttribute","Promise","resolve","then","msg","textContent","updateResultsCount","current","total","limit","matchesCountMsg","test","classList","add","remove","select","focus","open","clientHeight","firstElementChild"],"mappings":"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","file":"../pdf_find_bar.js","sourcesContent":["define([\n  \"./pdfjs_dev\",\n  \"./ui_utils\",\n  \"./pdf_find_controller\"\n],function(\n  PDFJSDev,\n  ui_utils,\n  pdf_find_controller\n){\n  /* Copyright 2012 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { FindState } = pdf_find_controller;\n  const { NullL10n } = ui_utils;\n\n  const MATCHES_COUNT_LIMIT = 1000;\n\n  /**\n   * Creates a \"search bar\" given a set of DOM elements that act as controls\n   * for searching or for setting search preferences in the UI. This object\n   * also sets up the appropriate events for the controls. Actual searching\n   * is done by PDFFindController.\n   */\n  class PDFFindBar {\n    constructor(options, eventBus, l10n = NullL10n) {\n      this.opened = false;\n\n      this.bar = options.bar || null;\n      this.toggleButton = options.toggleButton || null;\n      this.findField = options.findField || null;\n      this.highlightAll = options.highlightAllCheckbox || null;\n      this.caseSensitive = options.caseSensitiveCheckbox || null;\n      this.entireWord = options.entireWordCheckbox || null;\n      this.findMsg = options.findMsg || null;\n      this.findResultsCount = options.findResultsCount || null;\n      this.findPreviousButton = options.findPreviousButton || null;\n      this.findNextButton = options.findNextButton || null;\n      this.eventBus = eventBus;\n      this.l10n = l10n;\n\n      // Add event listeners to the DOM elements.\n      this.toggleButton.addEventListener(\"click\", () => {\n        this.toggle();\n      });\n\n      this.findField.addEventListener(\"input\", () => {\n        this.dispatchEvent(\"\");\n      });\n\n      this.bar.addEventListener(\"keydown\", e => {\n        switch (e.keyCode) {\n          case 13: // Enter\n            if (e.target === this.findField) {\n              this.dispatchEvent(\"again\", e.shiftKey);\n            }\n            break;\n          case 27: // Escape\n            this.close();\n            break;\n        }\n      });\n\n      this.findPreviousButton.addEventListener(\"click\", () => {\n        this.dispatchEvent(\"again\", true);\n      });\n\n      this.findNextButton.addEventListener(\"click\", () => {\n        this.dispatchEvent(\"again\", false);\n      });\n\n      this.highlightAll.addEventListener(\"click\", () => {\n        this.dispatchEvent(\"highlightallchange\");\n      });\n\n      this.caseSensitive.addEventListener(\"click\", () => {\n        this.dispatchEvent(\"casesensitivitychange\");\n      });\n\n      this.entireWord.addEventListener(\"click\", () => {\n        this.dispatchEvent(\"entirewordchange\");\n      });\n\n      this.eventBus._on(\"resize\", this._adjustWidth.bind(this));\n    }\n\n    reset() {\n      this.updateUIState();\n    }\n\n    dispatchEvent(type, findPrev) {\n      this.eventBus.dispatch(\"find\", {\n        source: this,\n        type,\n        query: this.findField.value,\n        phraseSearch: true,\n        caseSensitive: this.caseSensitive.checked,\n        entireWord: this.entireWord.checked,\n        highlightAll: this.highlightAll.checked,\n        findPrevious: findPrev,\n      });\n    }\n\n    updateUIState(state, previous, matchesCount) {\n      let findMsg = \"\";\n      let status = \"\";\n\n      switch (state) {\n        case FindState.FOUND:\n          break;\n\n        case FindState.PENDING:\n          status = \"pending\";\n          break;\n\n        case FindState.NOT_FOUND:\n          findMsg = this.l10n.get(\"find_not_found\", null, \"Phrase not found\");\n          status = \"notFound\";\n          break;\n\n        case FindState.WRAPPED:\n          if (previous) {\n            findMsg = this.l10n.get(\n              \"find_reached_top\",\n              null,\n              \"Reached top of document, continued from bottom\"\n            );\n          } else {\n            findMsg = this.l10n.get(\n              \"find_reached_bottom\",\n              null,\n              \"Reached end of document, continued from top\"\n            );\n          }\n          break;\n      }\n      this.findField.setAttribute(\"data-status\", status);\n\n      Promise.resolve(findMsg).then(msg => {\n        this.findMsg.textContent = msg;\n        this._adjustWidth();\n      });\n\n      this.updateResultsCount(matchesCount);\n    }\n\n    updateResultsCount({ current = 0, total = 0 } = {}) {\n      if (!this.findResultsCount) {\n        return; // No UI control is provided.\n      }\n      const limit = MATCHES_COUNT_LIMIT;\n      let matchesCountMsg = \"\";\n\n      if (total > 0) {\n        if (total > limit) {\n          if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n            // TODO: Remove this hard-coded `[other]` form once plural support has\n            // been implemented in the mozilla-central specific `l10n.js` file.\n            matchesCountMsg = this.l10n.get(\n              \"find_match_count_limit[other]\",\n              {\n                limit,\n              },\n              \"More than {{limit}} matches\"\n            );\n          } else {\n            matchesCountMsg = this.l10n.get(\n              \"find_match_count_limit\",\n              {\n                limit,\n              },\n              \"More than {{limit}} match\" + (limit !== 1 ? \"es\" : \"\")\n            );\n          }\n        } else {\n          if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n            // TODO: Remove this hard-coded `[other]` form once plural support has\n            // been implemented in the mozilla-central specific `l10n.js` file.\n            matchesCountMsg = this.l10n.get(\n              \"find_match_count[other]\",\n              {\n                current,\n                total,\n              },\n              \"{{current}} of {{total}} matches\"\n            );\n          } else {\n            matchesCountMsg = this.l10n.get(\n              \"find_match_count\",\n              {\n                current,\n                total,\n              },\n              \"{{current}} of {{total}} match\" + (total !== 1 ? \"es\" : \"\")\n            );\n          }\n        }\n      }\n      Promise.resolve(matchesCountMsg).then(msg => {\n        this.findResultsCount.textContent = msg;\n        this.findResultsCount.classList.toggle(\"hidden\", !total);\n        // Since `updateResultsCount` may be called from `PDFFindController`,\n        // ensure that the width of the findbar is always updated correctly.\n        this._adjustWidth();\n      });\n    }\n\n    open() {\n      if (!this.opened) {\n        this.opened = true;\n        this.toggleButton.classList.add(\"toggled\");\n        this.bar.classList.remove(\"hidden\");\n      }\n      this.findField.select();\n      this.findField.focus();\n\n      this._adjustWidth();\n    }\n\n    close() {\n      if (!this.opened) {\n        return;\n      }\n      this.opened = false;\n      this.toggleButton.classList.remove(\"toggled\");\n      this.bar.classList.add(\"hidden\");\n\n      this.eventBus.dispatch(\"findbarclose\", { source: this });\n    }\n\n    toggle() {\n      if (this.opened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _adjustWidth() {\n      if (!this.opened) {\n        return;\n      }\n\n      // The find bar has an absolute position and thus the browser extends\n      // its width to the maximum possible width once the find bar does not fit\n      // entirely within the window anymore (and its elements are automatically\n      // wrapped). Here we detect and fix that.\n      this.bar.classList.remove(\"wrapContainers\");\n\n      const findbarHeight = this.bar.clientHeight;\n      const inputContainerHeight = this.bar.firstElementChild.clientHeight;\n\n      if (findbarHeight > inputContainerHeight) {\n        // The findbar is taller than the input container, which means that\n        // the browser wrapped some of the elements. For a consistent look,\n        // wrap all of them to adjust the width of the find bar.\n        this.bar.classList.add(\"wrapContainers\");\n      }\n    }\n  }\n\n  return { PDFFindBar };\n});"]}