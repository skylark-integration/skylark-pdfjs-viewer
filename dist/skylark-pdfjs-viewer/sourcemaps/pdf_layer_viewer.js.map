{"version":3,"sources":["pdf_layer_viewer.js"],"names":["define","base_tree_viewer","BaseTreeViewer","PDFLayerViewer","[object Object]","options","super","this","l10n","eventBus","_on","_resetLayers","bind","_toggleAllTreeItems","reset","_optionalContentConfig","layersCount","dispatch","source","element","groupId","input","setVisibility","checked","promise","Promise","resolve","onclick","evt","target","name","textContent","get","style","fontStyle","_normalizeTextContent","div","_addToggleButton","optionalContentConfig","pdfDocument","_pdfDocument","groups","getOrder","_dispatchEvent","fragment","document","createDocumentFragment","queue","parent","hasAnyNesting","length","levelData","shift","createElement","className","appendChild","_setNestedName","itemsDiv","push","order","group","getGroup","_bindLink","type","id","visible","label","setAttribute","_finishRendering","getOptionalContentConfig","render"],"mappings":"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","file":"../pdf_layer_viewer.js","sourcesContent":["define([\n  \"./base_tree_viewer\"\n],function(base_tree_viewer){\n  /* Copyright 2020 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { BaseTreeViewer } = base_tree_viewer;\n\n  /**\n   * @typedef {Object} PDFLayerViewerOptions\n   * @property {HTMLDivElement} container - The viewer element.\n   * @property {EventBus} eventBus - The application event bus.\n   * @property {IL10n} l10n - Localization service.\n   */\n\n  /**\n   * @typedef {Object} PDFLayerViewerRenderParameters\n   * @property {OptionalContentConfig|null} optionalContentConfig - An\n   *   {OptionalContentConfig} instance.\n   * @property {PDFDocument} pdfDocument - A {PDFDocument} instance.\n   */\n\n  class PDFLayerViewer extends BaseTreeViewer {\n    constructor(options) {\n      super(options);\n      this.l10n = options.l10n;\n\n      this.eventBus._on(\"resetlayers\", this._resetLayers.bind(this));\n      this.eventBus._on(\"togglelayerstree\", this._toggleAllTreeItems.bind(this));\n    }\n\n    reset() {\n      super.reset();\n      this._optionalContentConfig = null;\n    }\n\n    /**\n     * @private\n     */\n    _dispatchEvent(layersCount) {\n      this.eventBus.dispatch(\"layersloaded\", {\n        source: this,\n        layersCount,\n      });\n    }\n\n    /**\n     * @private\n     */\n    _bindLink(element, { groupId, input }) {\n      const setVisibility = () => {\n        this._optionalContentConfig.setVisibility(groupId, input.checked);\n\n        this.eventBus.dispatch(\"optionalcontentconfig\", {\n          source: this,\n          promise: Promise.resolve(this._optionalContentConfig),\n        });\n      };\n\n      element.onclick = evt => {\n        if (evt.target === input) {\n          setVisibility();\n          return true;\n        } else if (evt.target !== element) {\n          return true; // The target is the \"label\", which is handled above.\n        }\n        input.checked = !input.checked;\n        setVisibility();\n        return false;\n      };\n    }\n\n    /**\n     * @private\n     */\n    async _setNestedName(element, { name = null }) {\n      if (typeof name === \"string\") {\n        element.textContent = this._normalizeTextContent(name);\n        return;\n      }\n      element.textContent = await this.l10n.get(\n        \"additional_layers\",\n        null,\n        \"Additional Layers\"\n      );\n      element.style.fontStyle = \"italic\";\n    }\n\n    /**\n     * @private\n     */\n    _addToggleButton(div, { name = null }) {\n      super._addToggleButton(div, /* hidden = */ name === null);\n    }\n\n    /**\n     * @private\n     */\n    _toggleAllTreeItems() {\n      if (!this._optionalContentConfig) {\n        return;\n      }\n      super._toggleAllTreeItems();\n    }\n\n    /**\n     * @param {PDFLayerViewerRenderParameters} params\n     */\n    render({ optionalContentConfig, pdfDocument }) {\n      if (this._optionalContentConfig) {\n        this.reset();\n      }\n      this._optionalContentConfig = optionalContentConfig || null;\n      this._pdfDocument = pdfDocument || null;\n\n      const groups = optionalContentConfig && optionalContentConfig.getOrder();\n      if (!groups) {\n        this._dispatchEvent(/* layersCount = */ 0);\n        return;\n      }\n\n      const fragment = document.createDocumentFragment(),\n        queue = [{ parent: fragment, groups }];\n      let layersCount = 0,\n        hasAnyNesting = false;\n      while (queue.length > 0) {\n        const levelData = queue.shift();\n        for (const groupId of levelData.groups) {\n          const div = document.createElement(\"div\");\n          div.className = \"treeItem\";\n\n          const element = document.createElement(\"a\");\n          div.appendChild(element);\n\n          if (typeof groupId === \"object\") {\n            hasAnyNesting = true;\n            this._addToggleButton(div, groupId);\n            this._setNestedName(element, groupId);\n\n            const itemsDiv = document.createElement(\"div\");\n            itemsDiv.className = \"treeItems\";\n            div.appendChild(itemsDiv);\n\n            queue.push({ parent: itemsDiv, groups: groupId.order });\n          } else {\n            const group = optionalContentConfig.getGroup(groupId);\n\n            const input = document.createElement(\"input\");\n            this._bindLink(element, { groupId, input });\n            input.type = \"checkbox\";\n            input.id = groupId;\n            input.checked = group.visible;\n\n            const label = document.createElement(\"label\");\n            label.setAttribute(\"for\", groupId);\n            label.textContent = this._normalizeTextContent(group.name);\n\n            element.appendChild(input);\n            element.appendChild(label);\n\n            layersCount++;\n          }\n\n          levelData.parent.appendChild(div);\n        }\n      }\n\n      this._finishRendering(fragment, layersCount, hasAnyNesting);\n    }\n\n    /**\n     * @private\n     */\n    async _resetLayers() {\n      if (!this._optionalContentConfig) {\n        return;\n      }\n      // Fetch the default optional content configuration...\n      const optionalContentConfig = await this._pdfDocument.getOptionalContentConfig();\n\n      this.eventBus.dispatch(\"optionalcontentconfig\", {\n        source: this,\n        promise: Promise.resolve(optionalContentConfig),\n      });\n\n      // ... and reset the sidebarView to the default state.\n      this.render({\n        optionalContentConfig,\n        pdfDocument: this._pdfDocument,\n      });\n    }\n  }\n\n  return { PDFLayerViewer };\n\n});"]}