{"version":3,"sources":["pdf_thumbnail_view.js"],"names":["define","pdfjsLib","PDFJSDev","ui_utils","pdf_rendering_queue","getOutputScale","NullL10n","RenderingCancelledException","RenderingStates","MAX_NUM_SCALING_STEPS","THUMBNAIL_CANVAS_BORDER_WIDTH","THUMBNAIL_WIDTH","TempImageFactory","tempCanvasCache","[object Object]","width","height","tempCanvas","document","createElement","test","mozOpaque","ctx","getContext","alpha","save","fillStyle","fillRect","restore","PDFThumbnailView","container","id","defaultViewport","optionalContentConfigPromise","linkService","renderingQueue","checkSetImageDisabled","disableCanvasToImageConversion","l10n","this","renderingId","pageLabel","pdfPage","rotation","viewport","pdfPageRotate","_optionalContentConfigPromise","renderTask","renderingState","INITIAL","resume","_checkSetImageDisabled","pageWidth","pageHeight","pageRatio","canvasWidth","canvasHeight","scale","anchor","href","getAnchorUrl","_thumbPageTitle","then","msg","title","onclick","goToPage","div","className","setAttribute","ring","borderAdjustment","style","appendChild","rotate","totalRotation","getViewport","reset","cancelRendering","removeAttribute","childNodes","i","length","removeChild","canvas","image","clone","cancel","outputScale","sx","sy","scaled","FINISHED","_thumbPageCanvas","src","toDataURL","console","error","Promise","resolve","undefined","reject","Error","RUNNING","finishRenderTask","async","_convertCanvasToImage","transform","_getPageDrawContext","renderContext","canvasContext","render","onContinue","cont","isHighestPriority","PAUSED","resultPromise","promise","finally","isPageCached","cleanup","pageView","img","setPdfPage","drawImage","reducedWidth","reducedHeight","reducedImage","getCanvas","reducedImageCtx","get","page","label"],"mappings":"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","file":"../pdf_thumbnail_view.js","sourcesContent":["define([\n  \"skylark-pdfjs-display\",\n  \"./pdfjs_dev\",\n  \"./ui_utils\",\n  \"./pdf_rendering_queue\"\n],function(\n  pdfjsLib,\n  PDFJSDev,\n  ui_utils,\n  pdf_rendering_queue\n){\n  /* Copyright 2012 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { getOutputScale, NullL10n } = ui_utils;\n  const { RenderingCancelledException } = pdfjsLib;\n  const { RenderingStates } = pdf_rendering_queue;\n\n  const MAX_NUM_SCALING_STEPS = 3;\n  const THUMBNAIL_CANVAS_BORDER_WIDTH = 1; // px\n  const THUMBNAIL_WIDTH = 98; // px\n\n  /**\n   * @typedef {Object} PDFThumbnailViewOptions\n   * @property {HTMLDivElement} container - The viewer element.\n   * @property {number} id - The thumbnail's unique ID (normally its number).\n   * @property {PageViewport} defaultViewport - The page viewport.\n   * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n   *   A promise that is resolved with an {@link OptionalContentConfig} instance.\n   *   The default value is `null`.\n   * @property {IPDFLinkService} linkService - The navigation/linking service.\n   * @property {PDFRenderingQueue} renderingQueue - The rendering queue object.\n   * @property {function} checkSetImageDisabled\n   * @property {boolean} [disableCanvasToImageConversion] - Don't convert the\n   *   canvas thumbnails to images. This prevents `toDataURL` calls, but\n   *   increases the overall memory usage. The default value is `false`.\n   * @property {IL10n} l10n - Localization service.\n   */\n\n  const TempImageFactory = (function TempImageFactoryClosure() {\n    let tempCanvasCache = null;\n\n    return {\n      getCanvas(width, height) {\n        let tempCanvas = tempCanvasCache;\n        if (!tempCanvas) {\n          tempCanvas = document.createElement(\"canvas\");\n          tempCanvasCache = tempCanvas;\n        }\n        tempCanvas.width = width;\n        tempCanvas.height = height;\n\n        // Since this is a temporary canvas, we need to fill it with a white\n        // background ourselves. `_getPageDrawContext` uses CSS rules for this.\n        if (\n          typeof PDFJSDev === \"undefined\" ||\n          PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n        ) {\n          tempCanvas.mozOpaque = true;\n        }\n\n        const ctx = tempCanvas.getContext(\"2d\", { alpha: false });\n        ctx.save();\n        ctx.fillStyle = \"rgb(255, 255, 255)\";\n        ctx.fillRect(0, 0, width, height);\n        ctx.restore();\n        return tempCanvas;\n      },\n\n      destroyCanvas() {\n        const tempCanvas = tempCanvasCache;\n        if (tempCanvas) {\n          // Zeroing the width and height causes Firefox to release graphics\n          // resources immediately, which can greatly reduce memory consumption.\n          tempCanvas.width = 0;\n          tempCanvas.height = 0;\n        }\n        tempCanvasCache = null;\n      },\n    };\n  })();\n\n  /**\n   * @implements {IRenderableView}\n   */\n  class PDFThumbnailView {\n    /**\n     * @param {PDFThumbnailViewOptions} options\n     */\n    constructor({\n      container,\n      id,\n      defaultViewport,\n      optionalContentConfigPromise,\n      linkService,\n      renderingQueue,\n      checkSetImageDisabled,\n      disableCanvasToImageConversion = false,\n      l10n = NullL10n,\n    }) {\n      this.id = id;\n      this.renderingId = \"thumbnail\" + id;\n      this.pageLabel = null;\n\n      this.pdfPage = null;\n      this.rotation = 0;\n      this.viewport = defaultViewport;\n      this.pdfPageRotate = defaultViewport.rotation;\n      this._optionalContentConfigPromise = optionalContentConfigPromise || null;\n\n      this.linkService = linkService;\n      this.renderingQueue = renderingQueue;\n\n      this.renderTask = null;\n      this.renderingState = RenderingStates.INITIAL;\n      this.resume = null;\n      this._checkSetImageDisabled =\n        checkSetImageDisabled ||\n        function () {\n          return false;\n        };\n      this.disableCanvasToImageConversion = disableCanvasToImageConversion;\n\n      this.pageWidth = this.viewport.width;\n      this.pageHeight = this.viewport.height;\n      this.pageRatio = this.pageWidth / this.pageHeight;\n\n      this.canvasWidth = THUMBNAIL_WIDTH;\n      this.canvasHeight = (this.canvasWidth / this.pageRatio) | 0;\n      this.scale = this.canvasWidth / this.pageWidth;\n\n      this.l10n = l10n;\n\n      const anchor = document.createElement(\"a\");\n      anchor.href = linkService.getAnchorUrl(\"#page=\" + id);\n      this._thumbPageTitle.then(msg => {\n        anchor.title = msg;\n      });\n      anchor.onclick = function () {\n        linkService.goToPage(id);\n        return false;\n      };\n      this.anchor = anchor;\n\n      const div = document.createElement(\"div\");\n      div.className = \"thumbnail\";\n      div.setAttribute(\"data-page-number\", this.id);\n      this.div = div;\n\n      const ring = document.createElement(\"div\");\n      ring.className = \"thumbnailSelectionRing\";\n      const borderAdjustment = 2 * THUMBNAIL_CANVAS_BORDER_WIDTH;\n      ring.style.width = this.canvasWidth + borderAdjustment + \"px\";\n      ring.style.height = this.canvasHeight + borderAdjustment + \"px\";\n      this.ring = ring;\n\n      div.appendChild(ring);\n      anchor.appendChild(div);\n      container.appendChild(anchor);\n    }\n\n    setPdfPage(pdfPage) {\n      this.pdfPage = pdfPage;\n      this.pdfPageRotate = pdfPage.rotate;\n      const totalRotation = (this.rotation + this.pdfPageRotate) % 360;\n      this.viewport = pdfPage.getViewport({ scale: 1, rotation: totalRotation });\n      this.reset();\n    }\n\n    reset() {\n      this.cancelRendering();\n      this.renderingState = RenderingStates.INITIAL;\n\n      this.pageWidth = this.viewport.width;\n      this.pageHeight = this.viewport.height;\n      this.pageRatio = this.pageWidth / this.pageHeight;\n\n      this.canvasHeight = (this.canvasWidth / this.pageRatio) | 0;\n      this.scale = this.canvasWidth / this.pageWidth;\n\n      this.div.removeAttribute(\"data-loaded\");\n      const ring = this.ring;\n      const childNodes = ring.childNodes;\n      for (let i = childNodes.length - 1; i >= 0; i--) {\n        ring.removeChild(childNodes[i]);\n      }\n      const borderAdjustment = 2 * THUMBNAIL_CANVAS_BORDER_WIDTH;\n      ring.style.width = this.canvasWidth + borderAdjustment + \"px\";\n      ring.style.height = this.canvasHeight + borderAdjustment + \"px\";\n\n      if (this.canvas) {\n        // Zeroing the width and height causes Firefox to release graphics\n        // resources immediately, which can greatly reduce memory consumption.\n        this.canvas.width = 0;\n        this.canvas.height = 0;\n        delete this.canvas;\n      }\n      if (this.image) {\n        this.image.removeAttribute(\"src\");\n        delete this.image;\n      }\n    }\n\n    update(rotation) {\n      if (typeof rotation !== \"undefined\") {\n        this.rotation = rotation;\n      }\n      const totalRotation = (this.rotation + this.pdfPageRotate) % 360;\n      this.viewport = this.viewport.clone({\n        scale: 1,\n        rotation: totalRotation,\n      });\n      this.reset();\n    }\n\n    /**\n     * PLEASE NOTE: Most likely you want to use the `this.reset()` method,\n     *              rather than calling this one directly.\n     */\n    cancelRendering() {\n      if (this.renderTask) {\n        this.renderTask.cancel();\n        this.renderTask = null;\n      }\n      this.resume = null;\n    }\n\n    /**\n     * @private\n     */\n    _getPageDrawContext() {\n      const canvas = document.createElement(\"canvas\");\n      // Keep the no-thumbnail outline visible, i.e. `data-loaded === false`,\n      // until rendering/image conversion is complete, to avoid display issues.\n      this.canvas = canvas;\n\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n      ) {\n        canvas.mozOpaque = true;\n      }\n      const ctx = canvas.getContext(\"2d\", { alpha: false });\n      const outputScale = getOutputScale(ctx);\n\n      canvas.width = (this.canvasWidth * outputScale.sx) | 0;\n      canvas.height = (this.canvasHeight * outputScale.sy) | 0;\n      canvas.style.width = this.canvasWidth + \"px\";\n      canvas.style.height = this.canvasHeight + \"px\";\n\n      const transform = outputScale.scaled\n        ? [outputScale.sx, 0, 0, outputScale.sy, 0, 0]\n        : null;\n\n      return [ctx, transform];\n    }\n\n    /**\n     * @private\n     */\n    _convertCanvasToImage() {\n      if (!this.canvas) {\n        return;\n      }\n      if (this.renderingState !== RenderingStates.FINISHED) {\n        return;\n      }\n      const className = \"thumbnailImage\";\n\n      if (this.disableCanvasToImageConversion) {\n        this.canvas.className = className;\n        this._thumbPageCanvas.then(msg => {\n          this.canvas.setAttribute(\"aria-label\", msg);\n        });\n\n        this.div.setAttribute(\"data-loaded\", true);\n        this.ring.appendChild(this.canvas);\n        return;\n      }\n      const image = document.createElement(\"img\");\n      image.className = className;\n      this._thumbPageCanvas.then(msg => {\n        image.setAttribute(\"aria-label\", msg);\n      });\n\n      image.style.width = this.canvasWidth + \"px\";\n      image.style.height = this.canvasHeight + \"px\";\n\n      image.src = this.canvas.toDataURL();\n      this.image = image;\n\n      this.div.setAttribute(\"data-loaded\", true);\n      this.ring.appendChild(image);\n\n      // Zeroing the width and height causes Firefox to release graphics\n      // resources immediately, which can greatly reduce memory consumption.\n      this.canvas.width = 0;\n      this.canvas.height = 0;\n      delete this.canvas;\n    }\n\n    draw() {\n      if (this.renderingState !== RenderingStates.INITIAL) {\n        console.error(\"Must be in new state before drawing\");\n        return Promise.resolve(undefined);\n      }\n      const { pdfPage } = this;\n\n      if (!pdfPage) {\n        this.renderingState = RenderingStates.FINISHED;\n        return Promise.reject(new Error(\"pdfPage is not loaded\"));\n      }\n\n      this.renderingState = RenderingStates.RUNNING;\n\n      const finishRenderTask = async (error = null) => {\n        // The renderTask may have been replaced by a new one, so only remove\n        // the reference to the renderTask if it matches the one that is\n        // triggering this callback.\n        if (renderTask === this.renderTask) {\n          this.renderTask = null;\n        }\n\n        if (error instanceof RenderingCancelledException) {\n          return;\n        }\n\n        this.renderingState = RenderingStates.FINISHED;\n        this._convertCanvasToImage();\n\n        if (error) {\n          throw error;\n        }\n      };\n\n      const [ctx, transform] = this._getPageDrawContext();\n      const drawViewport = this.viewport.clone({ scale: this.scale });\n      const renderContinueCallback = cont => {\n        if (!this.renderingQueue.isHighestPriority(this)) {\n          this.renderingState = RenderingStates.PAUSED;\n          this.resume = () => {\n            this.renderingState = RenderingStates.RUNNING;\n            cont();\n          };\n          return;\n        }\n        cont();\n      };\n\n      const renderContext = {\n        canvasContext: ctx,\n        transform,\n        viewport: drawViewport,\n        optionalContentConfigPromise: this._optionalContentConfigPromise,\n      };\n      const renderTask = (this.renderTask = pdfPage.render(renderContext));\n      renderTask.onContinue = renderContinueCallback;\n\n      const resultPromise = renderTask.promise.then(\n        function () {\n          finishRenderTask(null);\n        },\n        function (error) {\n          finishRenderTask(error);\n        }\n      );\n      // Only trigger cleanup, once rendering has finished, when the current\n      // pageView is *not* cached on the `BaseViewer`-instance.\n      resultPromise.finally(() => {\n        const pageCached = this.linkService.isPageCached(this.id);\n        if (pageCached) {\n          return;\n        }\n        ///this.pdfPage?.cleanup(); lwf\n        this.pdfPage && this.pdfPage.cleanup();\n      });\n\n      return resultPromise;\n    }\n\n    setImage(pageView) {\n      if (this._checkSetImageDisabled()) {\n        return;\n      }\n      if (this.renderingState !== RenderingStates.INITIAL) {\n        return;\n      }\n      const img = pageView.canvas;\n      if (!img) {\n        return;\n      }\n      if (!this.pdfPage) {\n        this.setPdfPage(pageView.pdfPage);\n      }\n\n      this.renderingState = RenderingStates.FINISHED;\n\n      const [ctx] = this._getPageDrawContext();\n      const canvas = ctx.canvas;\n      if (img.width <= 2 * canvas.width) {\n        ctx.drawImage(\n          img,\n          0,\n          0,\n          img.width,\n          img.height,\n          0,\n          0,\n          canvas.width,\n          canvas.height\n        );\n        this._convertCanvasToImage();\n        return;\n      }\n\n      // drawImage does an awful job of rescaling the image, doing it gradually.\n      let reducedWidth = canvas.width << MAX_NUM_SCALING_STEPS;\n      let reducedHeight = canvas.height << MAX_NUM_SCALING_STEPS;\n      const reducedImage = TempImageFactory.getCanvas(\n        reducedWidth,\n        reducedHeight\n      );\n      const reducedImageCtx = reducedImage.getContext(\"2d\");\n\n      while (reducedWidth > img.width || reducedHeight > img.height) {\n        reducedWidth >>= 1;\n        reducedHeight >>= 1;\n      }\n      reducedImageCtx.drawImage(\n        img,\n        0,\n        0,\n        img.width,\n        img.height,\n        0,\n        0,\n        reducedWidth,\n        reducedHeight\n      );\n      while (reducedWidth > 2 * canvas.width) {\n        reducedImageCtx.drawImage(\n          reducedImage,\n          0,\n          0,\n          reducedWidth,\n          reducedHeight,\n          0,\n          0,\n          reducedWidth >> 1,\n          reducedHeight >> 1\n        );\n        reducedWidth >>= 1;\n        reducedHeight >>= 1;\n      }\n      ctx.drawImage(\n        reducedImage,\n        0,\n        0,\n        reducedWidth,\n        reducedHeight,\n        0,\n        0,\n        canvas.width,\n        canvas.height\n      );\n      this._convertCanvasToImage();\n    }\n\n    get _thumbPageTitle() {\n      return this.l10n.get(\n        \"thumb_page_title\",\n        ///{ page: this.pageLabel ?? this.id }, // lwf\n        { page: this.pageLabel && this.id },\n        \"Page {{page}}\"\n      );\n    }\n\n    get _thumbPageCanvas() {\n      return this.l10n.get(\n        \"thumb_page_canvas\",\n        ///{ page: this.pageLabel ?? this.id }, // lwf\n        { page: this.pageLabel && this.id },\n        \"Thumbnail of Page {{page}}\"\n      );\n    }\n\n    /**\n     * @param {string|null} label\n     */\n    setPageLabel(label) {\n      this.pageLabel = typeof label === \"string\" ? label : null;\n\n      this._thumbPageTitle.then(msg => {\n        this.anchor.title = msg;\n      });\n\n      if (this.renderingState !== RenderingStates.FINISHED) {\n        return;\n      }\n\n      this._thumbPageCanvas.then(msg => {\n        if (this.image) {\n          this.image.setAttribute(\"aria-label\", msg);\n        } else if (this.disableCanvasToImageConversion && this.canvas) {\n          this.canvas.setAttribute(\"aria-label\", msg);\n        }\n      });\n    }\n  }\n\n  return { PDFThumbnailView, TempImageFactory };\n});"]}