{"version":3,"sources":["pdf_document_properties.js"],"names":["define","pdfjsLib","ui_utils","createPromiseCapability","PDFDateString","getPageSizeInches","getPDFFileNameFromURL","isPortraitOrientation","NullL10n","DEFAULT_FIELD_CONTENT","NON_METRIC_LOCALES","US_PAGE_NAMES","8.5x11","8.5x14","METRIC_PAGE_NAMES","297x420","210x297","getPageName","size","isPortrait","pageNames","width","height","PDFDocumentProperties","[object Object]","overlayName","fields","container","closeButton","overlayManager","eventBus","l10n","this","_reset","addEventListener","close","bind","register","_on","evt","_currentPageNumber","pageNumber","_pagesRotation","pagesRotation","_isNonMetricLocale","getLanguage","then","locale","includes","freezeFieldData","data","Object","defineProperty","value","freeze","writable","enumerable","configurable","Promise","all","open","_dataAvailableCapability","promise","currentPageNumber","fieldData","_updateUI","info","contentDispositionFilename","contentLength","pdfDocument","getMetadata","fileName","fileSize","creationDate","modificationDate","pageSize","isLinearized","url","_parseFileSize","_parseDate","CreationDate","ModDate","getPage","pdfPage","_parsePageSize","_parseLinearization","IsLinearized","title","Title","author","Author","subject","Subject","keywords","Keywords","creator","Creator","producer","Producer","version","PDFFormatVersion","pageCount","numPages","linearized","length","getDownloadInfo","assign","create","resolve","reset","active","id","content","textContent","kb","get","size_kb","toPrecision","toLocaleString","size_b","size_mb","pageSizeInches","sizeInches","Math","round","sizeMillimeters","pageName","rawName","Number","isInteger","exactMillimeters","intMillimeters","abs","toLowerCase","unit","name","orientation","inputDate","dateObject","toDateObject","date","toLocaleDateString","time","toLocaleTimeString"],"mappings":"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","file":"../pdf_document_properties.js","sourcesContent":["define([\n  \"skylark-pdfjs-display\",\n  \"./ui_utils\"\n],function(pdfjsLib,ui_utils){\n  /* Copyright 2012 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { createPromiseCapability, PDFDateString } = pdfjsLib;\n  const {\n    getPageSizeInches,\n    getPDFFileNameFromURL,\n    isPortraitOrientation,\n    NullL10n,\n  } = ui_utils;\n\n  const DEFAULT_FIELD_CONTENT = \"-\";\n\n  // See https://en.wikibooks.org/wiki/Lentis/Conversion_to_the_Metric_Standard_in_the_United_States\n  const NON_METRIC_LOCALES = [\"en-us\", \"en-lr\", \"my\"];\n\n  // Should use the format: `width x height`, in portrait orientation.\n  // See https://en.wikipedia.org/wiki/Paper_size\n  const US_PAGE_NAMES = {\n    \"8.5x11\": \"Letter\",\n    \"8.5x14\": \"Legal\",\n  };\n  const METRIC_PAGE_NAMES = {\n    \"297x420\": \"A3\",\n    \"210x297\": \"A4\",\n  };\n\n  function getPageName(size, isPortrait, pageNames) {\n    const width = isPortrait ? size.width : size.height;\n    const height = isPortrait ? size.height : size.width;\n\n    return pageNames[`${width}x${height}`];\n  }\n\n  /**\n   * @typedef {Object} PDFDocumentPropertiesOptions\n   * @property {string} overlayName - Name/identifier for the overlay.\n   * @property {Object} fields - Names and elements of the overlay's fields.\n   * @property {HTMLDivElement} container - Div container for the overlay.\n   * @property {HTMLButtonElement} closeButton - Button for closing the overlay.\n   */\n\n  class PDFDocumentProperties {\n    /**\n     * @param {PDFDocumentPropertiesOptions} options\n     * @param {OverlayManager} overlayManager - Manager for the viewer overlays.\n     * @param {EventBus} eventBus - The application event bus.\n     * @param {IL10n} l10n - Localization service.\n     */\n    constructor(\n      { overlayName, fields, container, closeButton },\n      overlayManager,\n      eventBus,\n      l10n = NullL10n\n    ) {\n      this.overlayName = overlayName;\n      this.fields = fields;\n      this.container = container;\n      this.overlayManager = overlayManager;\n      this.l10n = l10n;\n\n      this._reset();\n      // Bind the event listener for the Close button.\n      closeButton.addEventListener(\"click\", this.close.bind(this));\n\n      this.overlayManager.register(\n        this.overlayName,\n        this.container,\n        this.close.bind(this)\n      );\n\n      eventBus._on(\"pagechanging\", evt => {\n        this._currentPageNumber = evt.pageNumber;\n      });\n      eventBus._on(\"rotationchanging\", evt => {\n        this._pagesRotation = evt.pagesRotation;\n      });\n\n      this._isNonMetricLocale = true; // The default viewer locale is 'en-us'.\n      l10n.getLanguage().then(locale => {\n        this._isNonMetricLocale = NON_METRIC_LOCALES.includes(locale);\n      });\n    }\n\n    /**\n     * Open the document properties overlay.\n     */\n    async open() {\n      const freezeFieldData = data => {\n        Object.defineProperty(this, \"fieldData\", {\n          value: Object.freeze(data),\n          writable: false,\n          enumerable: true,\n          configurable: true,\n        });\n      };\n\n      await Promise.all([\n        this.overlayManager.open(this.overlayName),\n        this._dataAvailableCapability.promise,\n      ]);\n      const currentPageNumber = this._currentPageNumber;\n      const pagesRotation = this._pagesRotation;\n\n      // If the document properties were previously fetched (for this PDF file),\n      // just update the dialog immediately to avoid redundant lookups.\n      if (\n        this.fieldData &&\n        currentPageNumber === this.fieldData._currentPageNumber &&\n        pagesRotation === this.fieldData._pagesRotation\n      ) {\n        this._updateUI();\n        return;\n      }\n\n      // Get the document properties.\n      const {\n        info,\n        /* metadata, */\n        contentDispositionFilename,\n        contentLength,\n      } = await this.pdfDocument.getMetadata();\n\n      const [\n        fileName,\n        fileSize,\n        creationDate,\n        modificationDate,\n        pageSize,\n        isLinearized,\n      ] = await Promise.all([\n        contentDispositionFilename || getPDFFileNameFromURL(this.url),\n        this._parseFileSize(contentLength),\n        this._parseDate(info.CreationDate),\n        this._parseDate(info.ModDate),\n        this.pdfDocument.getPage(currentPageNumber).then(pdfPage => {\n          return this._parsePageSize(getPageSizeInches(pdfPage), pagesRotation);\n        }),\n        this._parseLinearization(info.IsLinearized),\n      ]);\n\n      freezeFieldData({\n        fileName,\n        fileSize,\n        title: info.Title,\n        author: info.Author,\n        subject: info.Subject,\n        keywords: info.Keywords,\n        creationDate,\n        modificationDate,\n        creator: info.Creator,\n        producer: info.Producer,\n        version: info.PDFFormatVersion,\n        pageCount: this.pdfDocument.numPages,\n        pageSize,\n        linearized: isLinearized,\n        _currentPageNumber: currentPageNumber,\n        _pagesRotation: pagesRotation,\n      });\n      this._updateUI();\n\n      // Get the correct fileSize, since it may not have been available\n      // or could potentially be wrong.\n      const { length } = await this.pdfDocument.getDownloadInfo();\n      if (contentLength === length) {\n        return; // The fileSize has already been correctly set.\n      }\n      const data = Object.assign(Object.create(null), this.fieldData);\n      data.fileSize = await this._parseFileSize(length);\n\n      freezeFieldData(data);\n      this._updateUI();\n    }\n\n    /**\n     * Close the document properties overlay.\n     */\n    close() {\n      this.overlayManager.close(this.overlayName);\n    }\n\n    /**\n     * Set a reference to the PDF document and the URL in order\n     * to populate the overlay fields with the document properties.\n     * Note that the overlay will contain no information if this method\n     * is not called.\n     *\n     * @param {PDFDocumentProxy} pdfDocument - A reference to the PDF document.\n     * @param {string} url - The URL of the document.\n     */\n    setDocument(pdfDocument, url = null) {\n      if (this.pdfDocument) {\n        this._reset();\n        this._updateUI(true);\n      }\n      if (!pdfDocument) {\n        return;\n      }\n      this.pdfDocument = pdfDocument;\n      this.url = url;\n\n      this._dataAvailableCapability.resolve();\n    }\n\n    /**\n     * @private\n     */\n    _reset() {\n      this.pdfDocument = null;\n      this.url = null;\n\n      delete this.fieldData;\n      this._dataAvailableCapability = createPromiseCapability();\n      this._currentPageNumber = 1;\n      this._pagesRotation = 0;\n    }\n\n    /**\n     * Always updates all of the dialog fields, to prevent inconsistent UI state.\n     * NOTE: If the contents of a particular field is neither a non-empty string,\n     *       nor a number, it will fall back to `DEFAULT_FIELD_CONTENT`.\n     * @private\n     */\n    _updateUI(reset = false) {\n      if (reset || !this.fieldData) {\n        for (const id in this.fields) {\n          this.fields[id].textContent = DEFAULT_FIELD_CONTENT;\n        }\n        return;\n      }\n      if (this.overlayManager.active !== this.overlayName) {\n        // Don't bother updating the dialog if has already been closed,\n        // since it will be updated the next time `this.open` is called.\n        return;\n      }\n      for (const id in this.fields) {\n        const content = this.fieldData[id];\n        this.fields[id].textContent =\n          content || content === 0 ? content : DEFAULT_FIELD_CONTENT;\n      }\n    }\n\n    /**\n     * @private\n     */\n    async _parseFileSize(fileSize = 0) {\n      const kb = fileSize / 1024;\n      if (!kb) {\n        return undefined;\n      } else if (kb < 1024) {\n        return this.l10n.get(\n          \"document_properties_kb\",\n          {\n            size_kb: (+kb.toPrecision(3)).toLocaleString(),\n            size_b: fileSize.toLocaleString(),\n          },\n          \"{{size_kb}} KB ({{size_b}} bytes)\"\n        );\n      }\n      return this.l10n.get(\n        \"document_properties_mb\",\n        {\n          size_mb: (+(kb / 1024).toPrecision(3)).toLocaleString(),\n          size_b: fileSize.toLocaleString(),\n        },\n        \"{{size_mb}} MB ({{size_b}} bytes)\"\n      );\n    }\n\n    /**\n     * @private\n     */\n    async _parsePageSize(pageSizeInches, pagesRotation) {\n      if (!pageSizeInches) {\n        return undefined;\n      }\n      // Take the viewer rotation into account as well; compare with Adobe Reader.\n      if (pagesRotation % 180 !== 0) {\n        pageSizeInches = {\n          width: pageSizeInches.height,\n          height: pageSizeInches.width,\n        };\n      }\n      const isPortrait = isPortraitOrientation(pageSizeInches);\n\n      let sizeInches = {\n        width: Math.round(pageSizeInches.width * 100) / 100,\n        height: Math.round(pageSizeInches.height * 100) / 100,\n      };\n      // 1in == 25.4mm; no need to round to 2 decimals for millimeters.\n      let sizeMillimeters = {\n        width: Math.round(pageSizeInches.width * 25.4 * 10) / 10,\n        height: Math.round(pageSizeInches.height * 25.4 * 10) / 10,\n      };\n\n      let pageName = null;\n      let rawName =\n        getPageName(sizeInches, isPortrait, US_PAGE_NAMES) ||\n        getPageName(sizeMillimeters, isPortrait, METRIC_PAGE_NAMES);\n\n      if (\n        !rawName &&\n        !(\n          Number.isInteger(sizeMillimeters.width) &&\n          Number.isInteger(sizeMillimeters.height)\n        )\n      ) {\n        // Attempt to improve the page name detection by falling back to fuzzy\n        // matching of the metric dimensions, to account for e.g. rounding errors\n        // and/or PDF files that define the page sizes in an imprecise manner.\n        const exactMillimeters = {\n          width: pageSizeInches.width * 25.4,\n          height: pageSizeInches.height * 25.4,\n        };\n        const intMillimeters = {\n          width: Math.round(sizeMillimeters.width),\n          height: Math.round(sizeMillimeters.height),\n        };\n\n        // Try to avoid false positives, by only considering \"small\" differences.\n        if (\n          Math.abs(exactMillimeters.width - intMillimeters.width) < 0.1 &&\n          Math.abs(exactMillimeters.height - intMillimeters.height) < 0.1\n        ) {\n          rawName = getPageName(intMillimeters, isPortrait, METRIC_PAGE_NAMES);\n          if (rawName) {\n            // Update *both* sizes, computed above, to ensure that the displayed\n            // dimensions always correspond to the detected page name.\n            sizeInches = {\n              width: Math.round((intMillimeters.width / 25.4) * 100) / 100,\n              height: Math.round((intMillimeters.height / 25.4) * 100) / 100,\n            };\n            sizeMillimeters = intMillimeters;\n          }\n        }\n      }\n      if (rawName) {\n        pageName = this.l10n.get(\n          \"document_properties_page_size_name_\" + rawName.toLowerCase(),\n          null,\n          rawName\n        );\n      }\n\n      return Promise.all([\n        this._isNonMetricLocale ? sizeInches : sizeMillimeters,\n        this.l10n.get(\n          \"document_properties_page_size_unit_\" +\n            (this._isNonMetricLocale ? \"inches\" : \"millimeters\"),\n          null,\n          this._isNonMetricLocale ? \"in\" : \"mm\"\n        ),\n        pageName,\n        this.l10n.get(\n          \"document_properties_page_size_orientation_\" +\n            (isPortrait ? \"portrait\" : \"landscape\"),\n          null,\n          isPortrait ? \"portrait\" : \"landscape\"\n        ),\n      ]).then(([{ width, height }, unit, name, orientation]) => {\n        return this.l10n.get(\n          \"document_properties_page_size_dimension_\" +\n            (name ? \"name_\" : \"\") +\n            \"string\",\n          {\n            width: width.toLocaleString(),\n            height: height.toLocaleString(),\n            unit,\n            name,\n            orientation,\n          },\n          \"{{width}} × {{height}} {{unit}} (\" +\n            (name ? \"{{name}}, \" : \"\") +\n            \"{{orientation}})\"\n        );\n      });\n    }\n\n    /**\n     * @private\n     */\n    async _parseDate(inputDate) {\n      const dateObject = PDFDateString.toDateObject(inputDate);\n      if (!dateObject) {\n        return undefined;\n      }\n      return this.l10n.get(\n        \"document_properties_date_string\",\n        {\n          date: dateObject.toLocaleDateString(),\n          time: dateObject.toLocaleTimeString(),\n        },\n        \"{{date}}, {{time}}\"\n      );\n    }\n\n    /**\n     * @private\n     */\n    _parseLinearization(isLinearized) {\n      return this.l10n.get(\n        \"document_properties_linearized_\" + (isLinearized ? \"yes\" : \"no\"),\n        null,\n        isLinearized ? \"Yes\" : \"No\"\n      );\n    }\n  }\n\n  return { PDFDocumentProperties };\n});"]}