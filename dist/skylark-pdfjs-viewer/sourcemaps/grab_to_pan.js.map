{"version":3,"sources":["grab_to_pan.js"],"names":["define","GrabToPan","options","this","element","document","ownerDocument","ignoreTarget","onActiveChanged","activate","bind","deactivate","toggle","_onmousedown","_onmousemove","_endPan","overlay","createElement","className","matchesSelector","prototype","CSS_CLASS_GRAB","active","addEventListener","classList","add","removeEventListener","remove","node","event","button","target","originalTarget","tagName","e","scrollLeftStart","scrollLeft","scrollTopStart","scrollTop","clientXStart","clientX","clientYStart","clientY","preventDefault","stopPropagation","focusedElement","activeElement","contains","blur","isNotIEorIsIE10plus","buttons","isChrome15OrOpera15plus","isSafari6plus","which","isLeftMouseReleased","xDiff","yDiff","scrollTo","top","left","behavior","parentNode","body","appendChild","some","prefix","name","documentElement","documentMode","chrome","window","webstore","app","test","navigator","vendor","userAgent"],"mappings":"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","file":"../grab_to_pan.js","sourcesContent":["define([],function(){\n  /* Copyright 2013 Rob Wu <rob@robwu.nl>\n   * https://github.com/Rob--W/grab-to-pan.js\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   * Construct a GrabToPan instance for a given HTML element.\n   * @param options.element {Element}\n   * @param options.ignoreTarget {function} optional. See `ignoreTarget(node)`\n   * @param options.onActiveChanged {function(boolean)} optional. Called\n   *  when grab-to-pan is (de)activated. The first argument is a boolean that\n   *  shows whether grab-to-pan is activated.\n   */\n  function GrabToPan(options) {\n    this.element = options.element;\n    this.document = options.element.ownerDocument;\n    if (typeof options.ignoreTarget === \"function\") {\n      this.ignoreTarget = options.ignoreTarget;\n    }\n    this.onActiveChanged = options.onActiveChanged;\n\n    // Bind the contexts to ensure that `this` always points to\n    // the GrabToPan instance.\n    this.activate = this.activate.bind(this);\n    this.deactivate = this.deactivate.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this._onmousedown = this._onmousedown.bind(this);\n    this._onmousemove = this._onmousemove.bind(this);\n    this._endPan = this._endPan.bind(this);\n\n    // This overlay will be inserted in the document when the mouse moves during\n    // a grab operation, to ensure that the cursor has the desired appearance.\n    const overlay = (this.overlay = document.createElement(\"div\"));\n    overlay.className = \"grab-to-pan-grabbing\";\n  }\n  GrabToPan.prototype = {\n    /**\n     * Class name of element which can be grabbed\n     */\n    CSS_CLASS_GRAB: \"grab-to-pan-grab\",\n\n    /**\n     * Bind a mousedown event to the element to enable grab-detection.\n     */\n    activate: function GrabToPan_activate() {\n      if (!this.active) {\n        this.active = true;\n        this.element.addEventListener(\"mousedown\", this._onmousedown, true);\n        this.element.classList.add(this.CSS_CLASS_GRAB);\n        if (this.onActiveChanged) {\n          this.onActiveChanged(true);\n        }\n      }\n    },\n\n    /**\n     * Removes all events. Any pending pan session is immediately stopped.\n     */\n    deactivate: function GrabToPan_deactivate() {\n      if (this.active) {\n        this.active = false;\n        this.element.removeEventListener(\"mousedown\", this._onmousedown, true);\n        this._endPan();\n        this.element.classList.remove(this.CSS_CLASS_GRAB);\n        if (this.onActiveChanged) {\n          this.onActiveChanged(false);\n        }\n      }\n    },\n\n    toggle: function GrabToPan_toggle() {\n      if (this.active) {\n        this.deactivate();\n      } else {\n        this.activate();\n      }\n    },\n\n    /**\n     * Whether to not pan if the target element is clicked.\n     * Override this method to change the default behaviour.\n     *\n     * @param node {Element} The target of the event\n     * @returns {boolean} Whether to not react to the click event.\n     */\n    ignoreTarget: function GrabToPan_ignoreTarget(node) {\n      // Use matchesSelector to check whether the clicked element\n      // is (a child of) an input element / link\n      return node[matchesSelector](\n        \"a[href], a[href] *, input, textarea, button, button *, select, option\"\n      );\n    },\n\n    /**\n     * @private\n     */\n    _onmousedown: function GrabToPan__onmousedown(event) {\n      if (event.button !== 0 || this.ignoreTarget(event.target)) {\n        return;\n      }\n      if (event.originalTarget) {\n        try {\n          // eslint-disable-next-line no-unused-expressions\n          event.originalTarget.tagName;\n        } catch (e) {\n          // Mozilla-specific: element is a scrollbar (XUL element)\n          return;\n        }\n      }\n\n      this.scrollLeftStart = this.element.scrollLeft;\n      this.scrollTopStart = this.element.scrollTop;\n      this.clientXStart = event.clientX;\n      this.clientYStart = event.clientY;\n      this.document.addEventListener(\"mousemove\", this._onmousemove, true);\n      this.document.addEventListener(\"mouseup\", this._endPan, true);\n      // When a scroll event occurs before a mousemove, assume that the user\n      // dragged a scrollbar (necessary for Opera Presto, Safari and IE)\n      // (not needed for Chrome/Firefox)\n      this.element.addEventListener(\"scroll\", this._endPan, true);\n      event.preventDefault();\n      event.stopPropagation();\n\n      const focusedElement = document.activeElement;\n      if (focusedElement && !focusedElement.contains(event.target)) {\n        focusedElement.blur();\n      }\n    },\n\n    /**\n     * @private\n     */\n    _onmousemove: function GrabToPan__onmousemove(event) {\n      this.element.removeEventListener(\"scroll\", this._endPan, true);\n      if (isLeftMouseReleased(event)) {\n        this._endPan();\n        return;\n      }\n      const xDiff = event.clientX - this.clientXStart;\n      const yDiff = event.clientY - this.clientYStart;\n      const scrollTop = this.scrollTopStart - yDiff;\n      const scrollLeft = this.scrollLeftStart - xDiff;\n      if (this.element.scrollTo) {\n        this.element.scrollTo({\n          top: scrollTop,\n          left: scrollLeft,\n          behavior: \"instant\",\n        });\n      } else {\n        this.element.scrollTop = scrollTop;\n        this.element.scrollLeft = scrollLeft;\n      }\n      if (!this.overlay.parentNode) {\n        document.body.appendChild(this.overlay);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _endPan: function GrabToPan__endPan() {\n      this.element.removeEventListener(\"scroll\", this._endPan, true);\n      this.document.removeEventListener(\"mousemove\", this._onmousemove, true);\n      this.document.removeEventListener(\"mouseup\", this._endPan, true);\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.overlay.remove();\n    },\n  };\n\n  // Get the correct (vendor-prefixed) name of the matches method.\n  let matchesSelector;\n  [\"webkitM\", \"mozM\", \"m\"].some(function (prefix) {\n    let name = prefix + \"atches\";\n    if (name in document.documentElement) {\n      matchesSelector = name;\n    }\n    name += \"Selector\";\n    if (name in document.documentElement) {\n      matchesSelector = name;\n    }\n    return matchesSelector; // If found, then truthy, and [].some() ends.\n  });\n\n  // Browser sniffing because it's impossible to feature-detect\n  // whether event.which for onmousemove is reliable\n  const isNotIEorIsIE10plus = !document.documentMode || document.documentMode > 9;\n  const chrome = window.chrome;\n  const isChrome15OrOpera15plus = chrome && (chrome.webstore || chrome.app);\n  //                                         ^ Chrome 15+       ^ Opera 15+\n  const isSafari6plus =\n    /Apple/.test(navigator.vendor) &&\n    /Version\\/([6-9]\\d*|[1-5]\\d+)/.test(navigator.userAgent);\n\n  /**\n   * Whether the left mouse is not pressed.\n   * @param event {MouseEvent}\n   * @returns {boolean} True if the left mouse button is not pressed,\n   *                    False if unsure or if the left mouse button is pressed.\n   */\n  function isLeftMouseReleased(event) {\n    if (\"buttons\" in event && isNotIEorIsIE10plus) {\n      // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-buttons\n      // Firefox 15+\n      // Internet Explorer 10+\n      return !(event.buttons & 1);\n    }\n    if (isChrome15OrOpera15plus || isSafari6plus) {\n      // Chrome 14+\n      // Opera 15+\n      // Safari 6.0+\n      return event.which === 0;\n    }\n    return false;\n  }\n\n  return { GrabToPan };\n});"]}