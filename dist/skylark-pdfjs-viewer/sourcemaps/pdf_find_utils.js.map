{"version":3,"sources":["pdf_find_utils.js"],"names":["define","CharacterType","SPACE","ALPHA_LETTER","PUNCT","HAN_LETTER","KATAKANA_LETTER","HIRAGANA_LETTER","HALFWIDTH_KATAKANA_LETTER","THAI_LETTER","getCharacterType","charCode","isAlphabeticalScript","isAscii","isAsciiSpace","isAsciiAlpha","isAsciiDigit","isThai","isHan","isKatakana","isHiragana","isHalfwidthKatakana"],"mappings":";;;;;;;AAAAA,UAAU,WAgBR,MAAMC,GACJC,MAAO,EACPC,aAAc,EACdC,MAAO,EACPC,WAAY,EACZC,gBAAiB,EACjBC,gBAAiB,EACjBC,0BAA2B,EAC3BC,YAAa,GA2Ff,OAASR,cAAAA,EAAeS,iBAjCxB,SAA0BC,GACxB,OAxDF,SAA8BA,GAC5B,OAAOA,EAAW,MAuDdC,CAAqBD,GApD3B,SAAiBA,GACf,OAA+B,IAAZ,MAAXA,GAoDFE,CAAQF,GAtChB,SAAsBA,GACpB,OAC6B,KAA3BA,GACyB,IAAzBA,GACwB,KAAxBA,GACwB,KAAxBA,EAkCMG,CAAaH,GACRV,EAAcC,MAnD7B,SAAsBS,GACpB,OACGA,GAAsB,IAAQA,GAAsB,KACpDA,GAAsB,IAAQA,GAAsB,GAkDjDI,CAAaJ,IA9CrB,SAAsBA,GACpB,OAAOA,GAAsB,IAAQA,GAAsB,GA8CrDK,CAAaL,IACmB,KAAhCA,EAEOV,EAAcE,aAEhBF,EAAcG,MApB3B,SAAgBO,GACd,OAA+B,OAAZ,MAAXA,GAoBKM,CAAON,GACTV,EAAcQ,YACc,MAA1BE,EACFV,EAAcC,MAEhBD,EAAcE,aA7CzB,SAAeQ,GACb,OACGA,GAAY,OAAUA,GAAY,OAClCA,GAAY,OAAUA,GAAY,MA6CjCO,CAAMP,GACDV,EAAcI,WA1CzB,SAAoBM,GAClB,OAAOA,GAAY,OAAUA,GAAY,MA0C9BQ,CAAWR,GACbV,EAAcK,gBAxCzB,SAAoBK,GAClB,OAAOA,GAAY,OAAUA,GAAY,MAwC9BS,CAAWT,GACbV,EAAcM,gBAtCzB,SAA6BI,GAC3B,OAAOA,GAAY,OAAUA,GAAY,MAsC9BU,CAAoBV,GACtBV,EAAcO,0BAEhBP,EAAcE","file":"../pdf_find_utils.js","sourcesContent":["define([],function(){\n  /* Copyright 2018 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const CharacterType = {\n    SPACE: 0,\n    ALPHA_LETTER: 1,\n    PUNCT: 2,\n    HAN_LETTER: 3,\n    KATAKANA_LETTER: 4,\n    HIRAGANA_LETTER: 5,\n    HALFWIDTH_KATAKANA_LETTER: 6,\n    THAI_LETTER: 7,\n  };\n\n  function isAlphabeticalScript(charCode) {\n    return charCode < 0x2e80;\n  }\n\n  function isAscii(charCode) {\n    return (charCode & 0xff80) === 0;\n  }\n\n  function isAsciiAlpha(charCode) {\n    return (\n      (charCode >= /* a = */ 0x61 && charCode <= /* z = */ 0x7a) ||\n      (charCode >= /* A = */ 0x41 && charCode <= /* Z = */ 0x5a)\n    );\n  }\n\n  function isAsciiDigit(charCode) {\n    return charCode >= /* 0 = */ 0x30 && charCode <= /* 9 = */ 0x39;\n  }\n\n  function isAsciiSpace(charCode) {\n    return (\n      charCode === /* SPACE = */ 0x20 ||\n      charCode === /* TAB = */ 0x09 ||\n      charCode === /* CR = */ 0x0d ||\n      charCode === /* LF = */ 0x0a\n    );\n  }\n\n  function isHan(charCode) {\n    return (\n      (charCode >= 0x3400 && charCode <= 0x9fff) ||\n      (charCode >= 0xf900 && charCode <= 0xfaff)\n    );\n  }\n\n  function isKatakana(charCode) {\n    return charCode >= 0x30a0 && charCode <= 0x30ff;\n  }\n\n  function isHiragana(charCode) {\n    return charCode >= 0x3040 && charCode <= 0x309f;\n  }\n\n  function isHalfwidthKatakana(charCode) {\n    return charCode >= 0xff60 && charCode <= 0xff9f;\n  }\n\n  function isThai(charCode) {\n    return (charCode & 0xff80) === 0x0e00;\n  }\n\n  /**\n   * This function is based on the word-break detection implemented in:\n   * https://hg.mozilla.org/mozilla-central/file/tip/intl/lwbrk/WordBreaker.cpp\n   */\n  function getCharacterType(charCode) {\n    if (isAlphabeticalScript(charCode)) {\n      if (isAscii(charCode)) {\n        if (isAsciiSpace(charCode)) {\n          return CharacterType.SPACE;\n        } else if (\n          isAsciiAlpha(charCode) ||\n          isAsciiDigit(charCode) ||\n          charCode === /* UNDERSCORE = */ 0x5f\n        ) {\n          return CharacterType.ALPHA_LETTER;\n        }\n        return CharacterType.PUNCT;\n      } else if (isThai(charCode)) {\n        return CharacterType.THAI_LETTER;\n      } else if (charCode === /* NBSP = */ 0xa0) {\n        return CharacterType.SPACE;\n      }\n      return CharacterType.ALPHA_LETTER;\n    }\n\n    if (isHan(charCode)) {\n      return CharacterType.HAN_LETTER;\n    } else if (isKatakana(charCode)) {\n      return CharacterType.KATAKANA_LETTER;\n    } else if (isHiragana(charCode)) {\n      return CharacterType.HIRAGANA_LETTER;\n    } else if (isHalfwidthKatakana(charCode)) {\n      return CharacterType.HALFWIDTH_KATAKANA_LETTER;\n    }\n    return CharacterType.ALPHA_LETTER;\n  }\n\n  return { CharacterType, getCharacterType };\n});"]}