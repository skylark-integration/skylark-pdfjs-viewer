{"version":3,"sources":["pdf_print_service.js"],"names":["define","ui_utils","app","viewer_compatibility","CSS_UNITS","NullL10n","PDFPrintServiceFactory","PDFViewerApplication","viewerCompatibilityParams","activeService","overlayManager","PDFPrintService","pdfDocument","pagesOverview","printContainer","printResolution","optionalContentConfigPromise","l10n","this","_printResolution","_optionalContentConfigPromise","getOptionalContentConfig","currentPage","scratchCanvas","document","createElement","prototype","[object Object]","throwIfInactive","body","querySelector","setAttribute","every","size","width","height","console","warn","pageStyleSheet","pageSize","textContent","appendChild","removeAttribute","remove","ensureOverlay","then","active","close","pageCount","length","renderNextPage","resolve","reject","renderProgress","index","activeServiceOnEntry","pageNumber","PRINT_UNITS","Math","floor","ctx","getContext","save","fillStyle","fillRect","restore","getPage","pdfPage","renderContext","canvasContext","transform","viewport","getViewport","scale","rotation","intent","annotationStorage","render","promise","renderPage","useRenderedPage","bind","Promise","printItem","img","style","disableCreateObjectURL","toBlob","blob","src","URL","createObjectURL","toDataURL","wrapper","onload","onerror","setTimeout","print","call","window","Error","dispatchEvent","eventType","event","createEvent","initCustomEvent","abort","destroy","total","progressContainer","getElementById","progress","round","progressBar","progressPerc","value","get","msg","open","error","renderPages","performPrint","catch","addEventListener","keyCode","ctrlKey","metaKey","altKey","shiftKey","chrome","opera","preventDefault","stopImmediatePropagation","stopPropagation","stopPropagationIfNeeded","detail","overlayPromise","register","onclick","instance","supportsPrinting"],"mappings":"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","file":"../pdf_print_service.js","sourcesContent":["define([\n  \"./ui_utils\",\n  \"./app\",\n  \"./viewer_compatibility\"\n],function(ui_utils,app,viewer_compatibility){\n  /* Copyright 2016 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n    const { CSS_UNITS, NullL10n } = ui_utils;\n    const { PDFPrintServiceFactory, PDFViewerApplication } = app;\n    const { viewerCompatibilityParams } = viewer_compatibility;\n\n    let activeService = null;\n    let overlayManager = null;\n\n    // Renders the page to the canvas of the given print service, and returns\n    // the suggested dimensions of the output page.\n    function renderPage(\n      activeServiceOnEntry,\n      pdfDocument,\n      pageNumber,\n      size,\n      printResolution,\n      optionalContentConfigPromise\n    ) {\n      const scratchCanvas = activeService.scratchCanvas;\n\n      // The size of the canvas in pixels for printing.\n      const PRINT_UNITS = printResolution / 72.0;\n      scratchCanvas.width = Math.floor(size.width * PRINT_UNITS);\n      scratchCanvas.height = Math.floor(size.height * PRINT_UNITS);\n\n      // The physical size of the img as specified by the PDF document.\n      const width = Math.floor(size.width * CSS_UNITS) + \"px\";\n      const height = Math.floor(size.height * CSS_UNITS) + \"px\";\n\n      const ctx = scratchCanvas.getContext(\"2d\");\n      ctx.save();\n      ctx.fillStyle = \"rgb(255, 255, 255)\";\n      ctx.fillRect(0, 0, scratchCanvas.width, scratchCanvas.height);\n      ctx.restore();\n\n      return pdfDocument\n        .getPage(pageNumber)\n        .then(function (pdfPage) {\n          const renderContext = {\n            canvasContext: ctx,\n            transform: [PRINT_UNITS, 0, 0, PRINT_UNITS, 0, 0],\n            viewport: pdfPage.getViewport({ scale: 1, rotation: size.rotation }),\n            intent: \"print\",\n            annotationStorage: pdfDocument.annotationStorage,\n            optionalContentConfigPromise,\n          };\n          return pdfPage.render(renderContext).promise;\n        })\n        .then(function () {\n          return {\n            width,\n            height,\n          };\n        });\n    }\n\n    function PDFPrintService(\n      pdfDocument,\n      pagesOverview,\n      printContainer,\n      printResolution,\n      optionalContentConfigPromise = null,\n      l10n\n    ) {\n      this.pdfDocument = pdfDocument;\n      this.pagesOverview = pagesOverview;\n      this.printContainer = printContainer;\n      this._printResolution = printResolution || 150;\n      this._optionalContentConfigPromise =\n        optionalContentConfigPromise || pdfDocument.getOptionalContentConfig();\n      this.l10n = l10n || NullL10n;\n      this.currentPage = -1;\n      // The temporary canvas where renderPage paints one page at a time.\n      this.scratchCanvas = document.createElement(\"canvas\");\n    }\n\n    PDFPrintService.prototype = {\n      layout() {\n        this.throwIfInactive();\n\n        const body = document.querySelector(\"body\");\n        body.setAttribute(\"data-pdfjsprinting\", true);\n\n        const hasEqualPageSizes = this.pagesOverview.every(function (size) {\n          return (\n            size.width === this.pagesOverview[0].width &&\n            size.height === this.pagesOverview[0].height\n          );\n        }, this);\n        if (!hasEqualPageSizes) {\n          console.warn(\n            \"Not all pages have the same size. The printed \" +\n              \"result may be incorrect!\"\n          );\n        }\n\n        // Insert a @page + size rule to make sure that the page size is correctly\n        // set. Note that we assume that all pages have the same size, because\n        // variable-size pages are not supported yet (e.g. in Chrome & Firefox).\n        // TODO(robwu): Use named pages when size calculation bugs get resolved\n        // (e.g. https://crbug.com/355116) AND when support for named pages is\n        // added (http://www.w3.org/TR/css3-page/#using-named-pages).\n        // In browsers where @page + size is not supported (such as Firefox,\n        // https://bugzil.la/851441), the next stylesheet will be ignored and the\n        // user has to select the correct paper size in the UI if wanted.\n        this.pageStyleSheet = document.createElement(\"style\");\n        const pageSize = this.pagesOverview[0];\n        this.pageStyleSheet.textContent =\n          // \"size:<width> <height>\" is what we need. But also add \"A4\" because\n          // Firefox incorrectly reports support for the other value.\n          \"@supports ((size:A4) and (size:1pt 1pt)) {\" +\n          \"@page { size: \" +\n          pageSize.width +\n          \"pt \" +\n          pageSize.height +\n          \"pt;}\" +\n          \"}\";\n        body.appendChild(this.pageStyleSheet);\n      },\n\n      destroy() {\n        if (activeService !== this) {\n          // |activeService| cannot be replaced without calling destroy() first,\n          // so if it differs then an external consumer has a stale reference to\n          // us.\n          return;\n        }\n        this.printContainer.textContent = \"\";\n\n        const body = document.querySelector(\"body\");\n        body.removeAttribute(\"data-pdfjsprinting\");\n\n        if (this.pageStyleSheet) {\n          this.pageStyleSheet.remove();\n          this.pageStyleSheet = null;\n        }\n        this.scratchCanvas.width = this.scratchCanvas.height = 0;\n        this.scratchCanvas = null;\n        activeService = null;\n        ensureOverlay().then(function () {\n          if (overlayManager.active !== \"printServiceOverlay\") {\n            return; // overlay was already closed\n          }\n          overlayManager.close(\"printServiceOverlay\");\n        });\n      },\n\n      renderPages() {\n        const pageCount = this.pagesOverview.length;\n        const renderNextPage = (resolve, reject) => {\n          this.throwIfInactive();\n          if (++this.currentPage >= pageCount) {\n            renderProgress(pageCount, pageCount, this.l10n);\n            resolve();\n            return;\n          }\n          const index = this.currentPage;\n          renderProgress(index, pageCount, this.l10n);\n          renderPage(\n            this,\n            this.pdfDocument,\n            /* pageNumber = */ index + 1,\n            this.pagesOverview[index],\n            this._printResolution,\n            this._optionalContentConfigPromise\n          )\n            .then(this.useRenderedPage.bind(this))\n            .then(function () {\n              renderNextPage(resolve, reject);\n            }, reject);\n        };\n        return new Promise(renderNextPage);\n      },\n\n      useRenderedPage(printItem) {\n        this.throwIfInactive();\n        const img = document.createElement(\"img\");\n        img.style.width = printItem.width;\n        img.style.height = printItem.height;\n\n        const scratchCanvas = this.scratchCanvas;\n        if (\n          \"toBlob\" in scratchCanvas &&\n          !viewerCompatibilityParams.disableCreateObjectURL\n        ) {\n          scratchCanvas.toBlob(function (blob) {\n            img.src = URL.createObjectURL(blob);\n          });\n        } else {\n          img.src = scratchCanvas.toDataURL();\n        }\n\n        const wrapper = document.createElement(\"div\");\n        wrapper.appendChild(img);\n        this.printContainer.appendChild(wrapper);\n\n        return new Promise(function (resolve, reject) {\n          img.onload = resolve;\n          img.onerror = reject;\n        });\n      },\n\n      performPrint() {\n        this.throwIfInactive();\n        return new Promise(resolve => {\n          // Push window.print in the macrotask queue to avoid being affected by\n          // the deprecation of running print() code in a microtask, see\n          // https://github.com/mozilla/pdf.js/issues/7547.\n          setTimeout(() => {\n            if (!this.active) {\n              resolve();\n              return;\n            }\n            print.call(window);\n            // Delay promise resolution in case print() was not synchronous.\n            setTimeout(resolve, 20); // Tidy-up.\n          }, 0);\n        });\n      },\n\n      get active() {\n        return this === activeService;\n      },\n\n      throwIfInactive() {\n        if (!this.active) {\n          throw new Error(\"This print request was cancelled or completed.\");\n        }\n      },\n    };\n\n    const print = window.print;\n    window.print = function () {\n      if (activeService) {\n        console.warn(\"Ignored window.print() because of a pending print job.\");\n        return;\n      }\n      ensureOverlay().then(function () {\n        if (activeService) {\n          overlayManager.open(\"printServiceOverlay\");\n        }\n      });\n\n      try {\n        dispatchEvent(\"beforeprint\");\n      } finally {\n        if (!activeService) {\n          console.error(\"Expected print service to be initialized.\");\n          ensureOverlay().then(function () {\n            if (overlayManager.active === \"printServiceOverlay\") {\n              overlayManager.close(\"printServiceOverlay\");\n            }\n          });\n          return; // eslint-disable-line no-unsafe-finally\n        }\n        const activeServiceOnEntry = activeService;\n        activeService\n          .renderPages()\n          .then(function () {\n            return activeServiceOnEntry.performPrint();\n          })\n          .catch(function () {\n            // Ignore any error messages.\n          })\n          .then(function () {\n            // aborts acts on the \"active\" print request, so we need to check\n            // whether the print request (activeServiceOnEntry) is still active.\n            // Without the check, an unrelated print request (created after aborting\n            // this print request while the pages were being generated) would be\n            // aborted.\n            if (activeServiceOnEntry.active) {\n              abort();\n            }\n          });\n      }\n    };\n\n    function dispatchEvent(eventType) {\n      const event = document.createEvent(\"CustomEvent\");\n      event.initCustomEvent(eventType, false, false, \"custom\");\n      window.dispatchEvent(event);\n    }\n\n    function abort() {\n      if (activeService) {\n        activeService.destroy();\n        dispatchEvent(\"afterprint\");\n      }\n    }\n\n    function renderProgress(index, total, l10n) {\n      const progressContainer = document.getElementById(\"printServiceOverlay\");\n      const progress = Math.round((100 * index) / total);\n      const progressBar = progressContainer.querySelector(\"progress\");\n      const progressPerc = progressContainer.querySelector(\".relative-progress\");\n      progressBar.value = progress;\n      l10n.get(\"print_progress_percent\", { progress }, progress + \"%\").then(msg => {\n        progressPerc.textContent = msg;\n      });\n    }\n\n    window.addEventListener(\n      \"keydown\",\n      function (event) {\n        // Intercept Cmd/Ctrl + P in all browsers.\n        // Also intercept Cmd/Ctrl + Shift + P in Chrome and Opera\n        if (\n          event.keyCode === /* P= */ 80 &&\n          (event.ctrlKey || event.metaKey) &&\n          !event.altKey &&\n          (!event.shiftKey || window.chrome || window.opera)\n        ) {\n          window.print();\n\n          // The (browser) print dialog cannot be prevented from being shown in\n          // IE11.\n          event.preventDefault();\n          if (event.stopImmediatePropagation) {\n            event.stopImmediatePropagation();\n          } else {\n            event.stopPropagation();\n          }\n        }\n      },\n      true\n    );\n\n    if (\"onbeforeprint\" in window) {\n      // Do not propagate before/afterprint events when they are not triggered\n      // from within this polyfill. (FF / Chrome 63+).\n      const stopPropagationIfNeeded = function (event) {\n        if (event.detail !== \"custom\" && event.stopImmediatePropagation) {\n          event.stopImmediatePropagation();\n        }\n      };\n      window.addEventListener(\"beforeprint\", stopPropagationIfNeeded);\n      window.addEventListener(\"afterprint\", stopPropagationIfNeeded);\n    }\n\n    let overlayPromise;\n    function ensureOverlay() {\n      if (!overlayPromise) {\n        overlayManager = PDFViewerApplication.overlayManager;\n        if (!overlayManager) {\n          throw new Error(\"The overlay manager has not yet been initialized.\");\n        }\n\n        overlayPromise = overlayManager.register(\n          \"printServiceOverlay\",\n          document.getElementById(\"printServiceOverlay\"),\n          abort,\n          true\n        );\n        document.getElementById(\"printCancel\").onclick = abort;\n      }\n      return overlayPromise;\n    }\n\n    PDFPrintServiceFactory.instance = {\n      supportsPrinting: true,\n\n      createPrintService(\n        pdfDocument,\n        pagesOverview,\n        printContainer,\n        printResolution,\n        optionalContentConfigPromise,\n        l10n\n      ) {\n        if (activeService) {\n          throw new Error(\"The print service is created and active.\");\n        }\n        activeService = new PDFPrintService(\n          pdfDocument,\n          pagesOverview,\n          printContainer,\n          printResolution,\n          optionalContentConfigPromise,\n          l10n\n        );\n        return activeService;\n      },\n    };\n\n    return { PDFPrintService };\n});"]}