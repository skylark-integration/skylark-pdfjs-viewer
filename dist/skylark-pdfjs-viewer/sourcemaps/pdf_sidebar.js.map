{"version":3,"sources":["pdf_sidebar.js"],"names":["define","ui_utils","pdf_rendering_queue","NullL10n","PresentationModeState","SidebarView","RenderingStates","UI_NOTIFICATION_CLASS","PDFSidebar","[object Object]","elements","pdfViewer","pdfThumbnailViewer","eventBus","l10n","this","isOpen","active","THUMBS","isInitialViewSet","onToggled","outerContainer","viewerContainer","toggleButton","thumbnailButton","outlineButton","attachmentsButton","layersButton","thumbnailView","outlineView","attachmentsView","layersView","_outlineOptionsContainer","outlineOptionsContainer","_currentOutlineItemButton","currentOutlineItemButton","_addEventListeners","_hideUINotification","switchView","disabled","visibleView","NONE","isThumbnailViewVisible","isOutlineViewVisible","OUTLINE","isAttachmentsViewVisible","ATTACHMENTS","isLayersViewVisible","LAYERS","view","UNKNOWN","_switchView","_dispatchEvent","forceOpen","isViewChanged","shouldForceRendering","close","console","error","classList","toggle","open","_updateThumbnailViewer","_forceRendering","add","remove","dispatch","source","forceRendering","pagesCount","pageIndex","pageView","getPageView","renderingState","FINISHED","getThumbnail","setImage","scrollThumbnailIntoView","currentPageNumber","get","then","msg","title","reset","addEventListener","evt","target","onTreeLoaded","count","button","_showUINotification","_on","outlineCount","enableCurrentOutlineItemButton","pagesPromise","attachmentsCount","layersCount","state","NORMAL"],"mappings":"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","file":"../pdf_sidebar.js","sourcesContent":["define([\n  \"./ui_utils\",\n  \"./pdf_rendering_queue\"\n],function(ui_utils,pdf_rendering_queue){\n  /* Copyright 2016 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { NullL10n, PresentationModeState, SidebarView } = ui_utils;\n  const { RenderingStates } = pdf_rendering_queue;\n\n  const UI_NOTIFICATION_CLASS = \"pdfSidebarNotification\";\n\n  /**\n   * @typedef {Object} PDFSidebarOptions\n   * @property {PDFSidebarElements} elements - The DOM elements.\n   * @property {PDFViewer} pdfViewer - The document viewer.\n   * @property {PDFThumbnailViewer} pdfThumbnailViewer - The thumbnail viewer.\n   * @property {EventBus} eventBus - The application event bus.\n   * @property {IL10n} l10n - The localization service.\n   */\n\n  /**\n   * @typedef {Object} PDFSidebarElements\n   * @property {HTMLDivElement} outerContainer - The outer container\n   *   (encasing both the viewer and sidebar elements).\n   * @property {HTMLDivElement} viewerContainer - The viewer container\n   *   (in which the viewer element is placed).\n   * @property {HTMLButtonElement} toggleButton - The button used for\n   *   opening/closing the sidebar.\n   * @property {HTMLButtonElement} thumbnailButton - The button used to show\n   *   the thumbnail view.\n   * @property {HTMLButtonElement} outlineButton - The button used to show\n   *   the outline view.\n   * @property {HTMLButtonElement} attachmentsButton - The button used to show\n   *   the attachments view.\n   * @property {HTMLButtonElement} layersButton - The button used to show\n   *   the layers view.\n   * @property {HTMLDivElement} thumbnailView - The container in which\n   *   the thumbnails are placed.\n   * @property {HTMLDivElement} outlineView - The container in which\n   *   the outline is placed.\n   * @property {HTMLDivElement} attachmentsView - The container in which\n   *   the attachments are placed.\n   * @property {HTMLDivElement} layersView - The container in which\n   *   the layers are placed.\n   * @property {HTMLDivElement} outlineOptionsContainer - The container in which\n   *   the outline view-specific option button(s) are placed.\n   * @property {HTMLButtonElement} currentOutlineItemButton - The button used to\n   *   find the current outline item.\n   */\n\n  class PDFSidebar {\n    /**\n     * @param {PDFSidebarOptions} options\n     */\n    constructor({\n      elements,\n      pdfViewer,\n      pdfThumbnailViewer,\n      eventBus,\n      l10n = NullL10n,\n    }) {\n      this.isOpen = false;\n      this.active = SidebarView.THUMBS;\n      this.isInitialViewSet = false;\n\n      /**\n       * Callback used when the sidebar has been opened/closed, to ensure that\n       * the viewers (PDFViewer/PDFThumbnailViewer) are updated correctly.\n       */\n      this.onToggled = null;\n\n      this.pdfViewer = pdfViewer;\n      this.pdfThumbnailViewer = pdfThumbnailViewer;\n\n      this.outerContainer = elements.outerContainer;\n      this.viewerContainer = elements.viewerContainer;\n      this.toggleButton = elements.toggleButton;\n\n      this.thumbnailButton = elements.thumbnailButton;\n      this.outlineButton = elements.outlineButton;\n      this.attachmentsButton = elements.attachmentsButton;\n      this.layersButton = elements.layersButton;\n\n      this.thumbnailView = elements.thumbnailView;\n      this.outlineView = elements.outlineView;\n      this.attachmentsView = elements.attachmentsView;\n      this.layersView = elements.layersView;\n\n      this._outlineOptionsContainer = elements.outlineOptionsContainer;\n      this._currentOutlineItemButton = elements.currentOutlineItemButton;\n\n      this.eventBus = eventBus;\n      this.l10n = l10n;\n\n      this._addEventListeners();\n    }\n\n    reset() {\n      this.isInitialViewSet = false;\n\n      this._hideUINotification(/* reset = */ true);\n      this.switchView(SidebarView.THUMBS);\n\n      this.outlineButton.disabled = false;\n      this.attachmentsButton.disabled = false;\n      this.layersButton.disabled = false;\n      this._currentOutlineItemButton.disabled = true;\n    }\n\n    /**\n     * @type {number} One of the values in {SidebarView}.\n     */\n    get visibleView() {\n      return this.isOpen ? this.active : SidebarView.NONE;\n    }\n\n    get isThumbnailViewVisible() {\n      return this.isOpen && this.active === SidebarView.THUMBS;\n    }\n\n    get isOutlineViewVisible() {\n      return this.isOpen && this.active === SidebarView.OUTLINE;\n    }\n\n    get isAttachmentsViewVisible() {\n      return this.isOpen && this.active === SidebarView.ATTACHMENTS;\n    }\n\n    get isLayersViewVisible() {\n      return this.isOpen && this.active === SidebarView.LAYERS;\n    }\n\n    /**\n     * @param {number} view - The sidebar view that should become visible,\n     *                        must be one of the values in {SidebarView}.\n     */\n    setInitialView(view = SidebarView.NONE) {\n      if (this.isInitialViewSet) {\n        return;\n      }\n      this.isInitialViewSet = true;\n\n      // If the user has already manually opened the sidebar, immediately closing\n      // it would be bad UX; also ignore the \"unknown\" sidebar view value.\n      if (view === SidebarView.NONE || view === SidebarView.UNKNOWN) {\n        this._dispatchEvent();\n        return;\n      }\n      // Prevent dispatching two back-to-back `sidebarviewchanged` events,\n      // since `this._switchView` dispatched the event if the view changed.\n      if (!this._switchView(view, /* forceOpen */ true)) {\n        this._dispatchEvent();\n      }\n    }\n\n    /**\n     * @param {number} view - The sidebar view that should be switched to,\n     *                        must be one of the values in {SidebarView}.\n     * @param {boolean} [forceOpen] - Ensure that the sidebar is open.\n     *                                The default value is `false`.\n     */\n    switchView(view, forceOpen = false) {\n      this._switchView(view, forceOpen);\n    }\n\n    /**\n     * @returns {boolean} Indicating if `this._dispatchEvent` was called.\n     * @private\n     */\n    _switchView(view, forceOpen = false) {\n      const isViewChanged = view !== this.active;\n      let shouldForceRendering = false;\n\n      switch (view) {\n        case SidebarView.NONE:\n          if (this.isOpen) {\n            this.close();\n            return true; // Closing will trigger rendering and dispatch the event.\n          }\n          return false;\n        case SidebarView.THUMBS:\n          if (this.isOpen && isViewChanged) {\n            shouldForceRendering = true;\n          }\n          break;\n        case SidebarView.OUTLINE:\n          if (this.outlineButton.disabled) {\n            return false;\n          }\n          break;\n        case SidebarView.ATTACHMENTS:\n          if (this.attachmentsButton.disabled) {\n            return false;\n          }\n          break;\n        case SidebarView.LAYERS:\n          if (this.layersButton.disabled) {\n            return false;\n          }\n          break;\n        default:\n          console.error(`PDFSidebar._switchView: \"${view}\" is not a valid view.`);\n          return false;\n      }\n      // Update the active view *after* it has been validated above,\n      // in order to prevent setting it to an invalid state.\n      this.active = view;\n\n      // Update the CSS classes, for all buttons...\n      this.thumbnailButton.classList.toggle(\n        \"toggled\",\n        view === SidebarView.THUMBS\n      );\n      this.outlineButton.classList.toggle(\n        \"toggled\",\n        view === SidebarView.OUTLINE\n      );\n      this.attachmentsButton.classList.toggle(\n        \"toggled\",\n        view === SidebarView.ATTACHMENTS\n      );\n      this.layersButton.classList.toggle(\"toggled\", view === SidebarView.LAYERS);\n      // ... and for all views.\n      this.thumbnailView.classList.toggle(\"hidden\", view !== SidebarView.THUMBS);\n      this.outlineView.classList.toggle(\"hidden\", view !== SidebarView.OUTLINE);\n      this.attachmentsView.classList.toggle(\n        \"hidden\",\n        view !== SidebarView.ATTACHMENTS\n      );\n      this.layersView.classList.toggle(\"hidden\", view !== SidebarView.LAYERS);\n\n      // Finally, update view-specific CSS classes.\n      this._outlineOptionsContainer.classList.toggle(\n        \"hidden\",\n        view !== SidebarView.OUTLINE\n      );\n\n      if (forceOpen && !this.isOpen) {\n        this.open();\n        return true; // Opening will trigger rendering and dispatch the event.\n      }\n      if (shouldForceRendering) {\n        this._updateThumbnailViewer();\n        this._forceRendering();\n      }\n      if (isViewChanged) {\n        this._dispatchEvent();\n      }\n      return isViewChanged;\n    }\n\n    open() {\n      if (this.isOpen) {\n        return;\n      }\n      this.isOpen = true;\n      this.toggleButton.classList.add(\"toggled\");\n\n      this.outerContainer.classList.add(\"sidebarMoving\", \"sidebarOpen\");\n\n      if (this.active === SidebarView.THUMBS) {\n        this._updateThumbnailViewer();\n      }\n      this._forceRendering();\n      this._dispatchEvent();\n\n      this._hideUINotification();\n    }\n\n    close() {\n      if (!this.isOpen) {\n        return;\n      }\n      this.isOpen = false;\n      this.toggleButton.classList.remove(\"toggled\");\n\n      this.outerContainer.classList.add(\"sidebarMoving\");\n      this.outerContainer.classList.remove(\"sidebarOpen\");\n\n      this._forceRendering();\n      this._dispatchEvent();\n    }\n\n    toggle() {\n      if (this.isOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _dispatchEvent() {\n      this.eventBus.dispatch(\"sidebarviewchanged\", {\n        source: this,\n        view: this.visibleView,\n      });\n    }\n\n    /**\n     * @private\n     */\n    _forceRendering() {\n      if (this.onToggled) {\n        this.onToggled();\n      } else {\n        // Fallback\n        this.pdfViewer.forceRendering();\n        this.pdfThumbnailViewer.forceRendering();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _updateThumbnailViewer() {\n      const { pdfViewer, pdfThumbnailViewer } = this;\n\n      // Use the rendered pages to set the corresponding thumbnail images.\n      const pagesCount = pdfViewer.pagesCount;\n      for (let pageIndex = 0; pageIndex < pagesCount; pageIndex++) {\n        const pageView = pdfViewer.getPageView(pageIndex);\n        if (pageView && pageView.renderingState === RenderingStates.FINISHED) {\n          const thumbnailView = pdfThumbnailViewer.getThumbnail(pageIndex);\n          thumbnailView.setImage(pageView);\n        }\n      }\n      pdfThumbnailViewer.scrollThumbnailIntoView(pdfViewer.currentPageNumber);\n    }\n\n    /**\n     * @private\n     */\n    _showUINotification() {\n      this.l10n\n        .get(\n          \"toggle_sidebar_notification2.title\",\n          null,\n          \"Toggle Sidebar (document contains outline/attachments/layers)\"\n        )\n        .then(msg => {\n          this.toggleButton.title = msg;\n        });\n\n      if (!this.isOpen) {\n        // Only show the notification on the `toggleButton` if the sidebar is\n        // currently closed, to avoid unnecessarily bothering the user.\n        this.toggleButton.classList.add(UI_NOTIFICATION_CLASS);\n      }\n    }\n\n    /**\n     * @private\n     */\n    _hideUINotification(reset = false) {\n      if (this.isOpen || reset) {\n        // Only hide the notification on the `toggleButton` if the sidebar is\n        // currently open, or when the current PDF document is being closed.\n        this.toggleButton.classList.remove(UI_NOTIFICATION_CLASS);\n      }\n\n      if (reset) {\n        this.l10n\n          .get(\"toggle_sidebar.title\", null, \"Toggle Sidebar\")\n          .then(msg => {\n            this.toggleButton.title = msg;\n          });\n      }\n    }\n\n    /**\n     * @private\n     */\n    _addEventListeners() {\n      this.viewerContainer.addEventListener(\"transitionend\", evt => {\n        if (evt.target === this.viewerContainer) {\n          this.outerContainer.classList.remove(\"sidebarMoving\");\n        }\n      });\n\n      this.toggleButton.addEventListener(\"click\", () => {\n        this.toggle();\n      });\n\n      // Buttons for switching views.\n      this.thumbnailButton.addEventListener(\"click\", () => {\n        this.switchView(SidebarView.THUMBS);\n      });\n\n      this.outlineButton.addEventListener(\"click\", () => {\n        this.switchView(SidebarView.OUTLINE);\n      });\n      this.outlineButton.addEventListener(\"dblclick\", () => {\n        this.eventBus.dispatch(\"toggleoutlinetree\", { source: this });\n      });\n\n      this.attachmentsButton.addEventListener(\"click\", () => {\n        this.switchView(SidebarView.ATTACHMENTS);\n      });\n\n      this.layersButton.addEventListener(\"click\", () => {\n        this.switchView(SidebarView.LAYERS);\n      });\n      this.layersButton.addEventListener(\"dblclick\", () => {\n        this.eventBus.dispatch(\"resetlayers\", { source: this });\n      });\n\n      // Buttons for view-specific options.\n      this._currentOutlineItemButton.addEventListener(\"click\", () => {\n        this.eventBus.dispatch(\"currentoutlineitem\", { source: this });\n      });\n\n      // Disable/enable views.\n      const onTreeLoaded = (count, button, view) => {\n        button.disabled = !count;\n\n        if (count) {\n          this._showUINotification();\n        } else if (this.active === view) {\n          // If the `view` was opened by the user during document load,\n          // switch away from it if it turns out to be empty.\n          this.switchView(SidebarView.THUMBS);\n        }\n      };\n\n      this.eventBus._on(\"outlineloaded\", evt => {\n        onTreeLoaded(evt.outlineCount, this.outlineButton, SidebarView.OUTLINE);\n\n        if (evt.enableCurrentOutlineItemButton) {\n          this.pdfViewer.pagesPromise.then(() => {\n            this._currentOutlineItemButton.disabled = !this.isInitialViewSet;\n          });\n        }\n      });\n\n      this.eventBus._on(\"attachmentsloaded\", evt => {\n        onTreeLoaded(\n          evt.attachmentsCount,\n          this.attachmentsButton,\n          SidebarView.ATTACHMENTS\n        );\n      });\n\n      this.eventBus._on(\"layersloaded\", evt => {\n        onTreeLoaded(evt.layersCount, this.layersButton, SidebarView.LAYERS);\n      });\n\n      // Update the thumbnailViewer, if visible, when exiting presentation mode.\n      this.eventBus._on(\"presentationmodechanged\", evt => {\n        if (\n          evt.state === PresentationModeState.NORMAL &&\n          this.isThumbnailViewVisible\n        ) {\n          this._updateThumbnailViewer();\n        }\n      });\n    }\n  }\n\n  return { PDFSidebar };\n});"]}