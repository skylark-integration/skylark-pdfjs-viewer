{"version":3,"sources":["password_prompt.js"],"names":["define","pdfjsLib","ui_utils","NullL10n","PasswordResponses","PasswordPrompt","[object Object]","options","overlayManager","l10n","this","overlayName","container","label","input","submitButton","cancelButton","updateCallback","reason","addEventListener","verify","bind","close","e","keyCode","register","open","then","promptString","focus","INCORRECT_PASSWORD","get","msg","textContent","value","password","length"],"mappings":";;;;;;;AAAAA,QACE,wBACA,cACA,SAASC,EAASC,GAgBlB,MAAMC,SAAEA,GAAaD,GACfE,kBAAEA,GAAsBH,EAgG9B,OAASI,qBA3EPC,YAAYC,EAASC,EAAgBC,EAAON,GAC1CO,KAAKC,YAAcJ,EAAQI,YAC3BD,KAAKE,UAAYL,EAAQK,UACzBF,KAAKG,MAAQN,EAAQM,MACrBH,KAAKI,MAAQP,EAAQO,MACrBJ,KAAKK,aAAeR,EAAQQ,aAC5BL,KAAKM,aAAeT,EAAQS,aAC5BN,KAAKF,eAAiBA,EACtBE,KAAKD,KAAOA,EAEZC,KAAKO,eAAiB,KACtBP,KAAKQ,OAAS,KAGdR,KAAKK,aAAaI,iBAAiB,QAAST,KAAKU,OAAOC,KAAKX,OAC7DA,KAAKM,aAAaG,iBAAiB,QAAST,KAAKY,MAAMD,KAAKX,OAC5DA,KAAKI,MAAMK,iBAAiB,UAAWI,IACL,KAA5BA,EAAEC,SACJd,KAAKU,WAITV,KAAKF,eAAeiB,SAClBf,KAAKC,YACLD,KAAKE,UACLF,KAAKY,MAAMD,KAAKX,OAChB,GAIJJ,OACEI,KAAKF,eAAekB,KAAKhB,KAAKC,aAAagB,KAAK,KAG9C,IAAIC,EAFJlB,KAAKI,MAAMe,SAITD,EADElB,KAAKQ,SAAWd,EAAkB0B,mBACrBpB,KAAKD,KAAKsB,IACvB,mBACA,KACA,uCAGarB,KAAKD,KAAKsB,IACvB,iBACA,KACA,8CAISJ,KAAKK,IAChBtB,KAAKG,MAAMoB,YAAcD,MAK/B1B,QACEI,KAAKF,eAAec,MAAMZ,KAAKC,aAAagB,KAAK,KAC/CjB,KAAKI,MAAMoB,MAAQ,KAIvB5B,SACE,MAAM6B,EAAWzB,KAAKI,MAAMoB,MACxBC,GAAYA,EAASC,OAAS,IAChC1B,KAAKY,QACLZ,KAAKO,eAAekB,IAIxB7B,kBAAkBW,EAAgBC,GAChCR,KAAKO,eAAiBA,EACtBP,KAAKQ,OAASA","file":"../password_prompt.js","sourcesContent":["define([\n  \"skylark-pdfjs-display\",\n  \"./ui_utils\"\n],function(pdfjsLib,ui_utils){\n  /* Copyright 2012 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { NullL10n } = ui_utils;\n  const { PasswordResponses } = pdfjsLib;\n\n  /**\n   * @typedef {Object} PasswordPromptOptions\n   * @property {string} overlayName - Name of the overlay for the overlay manager.\n   * @property {HTMLDivElement} container - Div container for the overlay.\n   * @property {HTMLParagraphElement} label - Label containing instructions for\n   *                                          entering the password.\n   * @property {HTMLInputElement} input - Input field for entering the password.\n   * @property {HTMLButtonElement} submitButton - Button for submitting the\n   *                                              password.\n   * @property {HTMLButtonElement} cancelButton - Button for cancelling password\n   *                                              entry.\n   */\n\n  class PasswordPrompt {\n    /**\n     * @param {PasswordPromptOptions} options\n     * @param {OverlayManager} overlayManager - Manager for the viewer overlays.\n     * @param {IL10n} l10n - Localization service.\n     */\n    constructor(options, overlayManager, l10n = NullL10n) {\n      this.overlayName = options.overlayName;\n      this.container = options.container;\n      this.label = options.label;\n      this.input = options.input;\n      this.submitButton = options.submitButton;\n      this.cancelButton = options.cancelButton;\n      this.overlayManager = overlayManager;\n      this.l10n = l10n;\n\n      this.updateCallback = null;\n      this.reason = null;\n\n      // Attach the event listeners.\n      this.submitButton.addEventListener(\"click\", this.verify.bind(this));\n      this.cancelButton.addEventListener(\"click\", this.close.bind(this));\n      this.input.addEventListener(\"keydown\", e => {\n        if (e.keyCode === /* Enter = */ 13) {\n          this.verify();\n        }\n      });\n\n      this.overlayManager.register(\n        this.overlayName,\n        this.container,\n        this.close.bind(this),\n        true\n      );\n    }\n\n    open() {\n      this.overlayManager.open(this.overlayName).then(() => {\n        this.input.focus();\n\n        let promptString;\n        if (this.reason === PasswordResponses.INCORRECT_PASSWORD) {\n          promptString = this.l10n.get(\n            \"password_invalid\",\n            null,\n            \"Invalid password. Please try again.\"\n          );\n        } else {\n          promptString = this.l10n.get(\n            \"password_label\",\n            null,\n            \"Enter the password to open this PDF file.\"\n          );\n        }\n\n        promptString.then(msg => {\n          this.label.textContent = msg;\n        });\n      });\n    }\n\n    close() {\n      this.overlayManager.close(this.overlayName).then(() => {\n        this.input.value = \"\";\n      });\n    }\n\n    verify() {\n      const password = this.input.value;\n      if (password && password.length > 0) {\n        this.close();\n        this.updateCallback(password);\n      }\n    }\n\n    setUpdateCallback(updateCallback, reason) {\n      this.updateCallback = updateCallback;\n      this.reason = reason;\n    }\n  }\n\n  return { PasswordPrompt };\n});"]}