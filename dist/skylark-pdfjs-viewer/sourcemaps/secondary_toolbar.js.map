{"version":3,"sources":["secondary_toolbar.js"],"names":["define","ui_utils","pdf_cursor_tools","pdf_single_page_viewer","SCROLLBAR_PADDING","ScrollMode","SpreadMode","CursorTool","PDFSinglePageViewer","SecondaryToolbar","[object Object]","options","mainContainer","eventBus","this","toolbar","toggleButton","toolbarButtonContainer","buttons","element","presentationModeButton","eventName","close","openFileButton","printButton","downloadButton","viewBookmarkButton","firstPageButton","lastPageButton","pageRotateCwButton","pageRotateCcwButton","cursorSelectToolButton","eventDetails","tool","SELECT","cursorHandToolButton","HAND","scrollVerticalButton","mode","VERTICAL","scrollHorizontalButton","HORIZONTAL","scrollWrappedButton","WRAPPED","spreadNoneButton","NONE","spreadOddButton","ODD","spreadEvenButton","EVEN","documentPropertiesButton","items","firstPage","lastPage","pageRotateCw","pageRotateCcw","opened","containerHeight","previousContainerHeight","reset","_bindClickListeners","_bindCursorToolsListener","_bindScrollModeListener","_bindSpreadModeListener","_on","_setMaxHeight","bind","evt","source","classList","add","remove","isOpen","pageNumber","_updateUIState","pagesCount","dispatch","disabled","addEventListener","toggle","details","property","scrollModeChanged","isScrollModeHorizontal","spreadModeChanged","open","clientHeight","style","maxHeight"],"mappings":"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","file":"../secondary_toolbar.js","sourcesContent":["define([\n  \"./ui_utils\",\n  \"./pdf_cursor_tools\",\n  \"./pdf_single_page_viewer\"\n],function(ui_utils,pdf_cursor_tools,pdf_single_page_viewer){\n  /* Copyright 2012 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { SCROLLBAR_PADDING, ScrollMode, SpreadMode } = ui_utils;\n  const { CursorTool } = pdf_cursor_tools;\n  const { PDFSinglePageViewer } = pdf_single_page_viewer;\n\n  /**\n   * @typedef {Object} SecondaryToolbarOptions\n   * @property {HTMLDivElement} toolbar - Container for the secondary toolbar.\n   * @property {HTMLButtonElement} toggleButton - Button to toggle the visibility\n   *   of the secondary toolbar.\n   * @property {HTMLDivElement} toolbarButtonContainer - Container where all the\n   *   toolbar buttons are placed. The maximum height of the toolbar is controlled\n   *   dynamically by adjusting the 'max-height' CSS property of this DOM element.\n   * @property {HTMLButtonElement} presentationModeButton - Button for entering\n   *   presentation mode.\n   * @property {HTMLButtonElement} openFileButton - Button to open a file.\n   * @property {HTMLButtonElement} printButton - Button to print the document.\n   * @property {HTMLButtonElement} downloadButton - Button to download the\n   *   document.\n   * @property {HTMLLinkElement} viewBookmarkButton - Button to obtain a bookmark\n   *   link to the current location in the document.\n   * @property {HTMLButtonElement} firstPageButton - Button to go to the first\n   *   page in the document.\n   * @property {HTMLButtonElement} lastPageButton - Button to go to the last page\n   *   in the document.\n   * @property {HTMLButtonElement} pageRotateCwButton - Button to rotate the pages\n   *   clockwise.\n   * @property {HTMLButtonElement} pageRotateCcwButton - Button to rotate the\n   *   pages counterclockwise.\n   * @property {HTMLButtonElement} cursorSelectToolButton - Button to enable the\n   *   select tool.\n   * @property {HTMLButtonElement} cursorHandToolButton - Button to enable the\n   *   hand tool.\n   * @property {HTMLButtonElement} documentPropertiesButton - Button for opening\n   *   the document properties dialog.\n   */\n\n  class SecondaryToolbar {\n    /**\n     * @param {SecondaryToolbarOptions} options\n     * @param {HTMLDivElement} mainContainer\n     * @param {EventBus} eventBus\n     */\n    constructor(options, mainContainer, eventBus) {\n      this.toolbar = options.toolbar;\n      this.toggleButton = options.toggleButton;\n      this.toolbarButtonContainer = options.toolbarButtonContainer;\n      this.buttons = [\n        {\n          element: options.presentationModeButton,\n          eventName: \"presentationmode\",\n          close: true,\n        },\n        { element: options.openFileButton, eventName: \"openfile\", close: true },\n        { element: options.printButton, eventName: \"print\", close: true },\n        { element: options.downloadButton, eventName: \"download\", close: true },\n        { element: options.viewBookmarkButton, eventName: null, close: true },\n        { element: options.firstPageButton, eventName: \"firstpage\", close: true },\n        { element: options.lastPageButton, eventName: \"lastpage\", close: true },\n        {\n          element: options.pageRotateCwButton,\n          eventName: \"rotatecw\",\n          close: false,\n        },\n        {\n          element: options.pageRotateCcwButton,\n          eventName: \"rotateccw\",\n          close: false,\n        },\n        {\n          element: options.cursorSelectToolButton,\n          eventName: \"switchcursortool\",\n          eventDetails: { tool: CursorTool.SELECT },\n          close: true,\n        },\n        {\n          element: options.cursorHandToolButton,\n          eventName: \"switchcursortool\",\n          eventDetails: { tool: CursorTool.HAND },\n          close: true,\n        },\n        {\n          element: options.scrollVerticalButton,\n          eventName: \"switchscrollmode\",\n          eventDetails: { mode: ScrollMode.VERTICAL },\n          close: true,\n        },\n        {\n          element: options.scrollHorizontalButton,\n          eventName: \"switchscrollmode\",\n          eventDetails: { mode: ScrollMode.HORIZONTAL },\n          close: true,\n        },\n        {\n          element: options.scrollWrappedButton,\n          eventName: \"switchscrollmode\",\n          eventDetails: { mode: ScrollMode.WRAPPED },\n          close: true,\n        },\n        {\n          element: options.spreadNoneButton,\n          eventName: \"switchspreadmode\",\n          eventDetails: { mode: SpreadMode.NONE },\n          close: true,\n        },\n        {\n          element: options.spreadOddButton,\n          eventName: \"switchspreadmode\",\n          eventDetails: { mode: SpreadMode.ODD },\n          close: true,\n        },\n        {\n          element: options.spreadEvenButton,\n          eventName: \"switchspreadmode\",\n          eventDetails: { mode: SpreadMode.EVEN },\n          close: true,\n        },\n        {\n          element: options.documentPropertiesButton,\n          eventName: \"documentproperties\",\n          close: true,\n        },\n      ];\n      this.items = {\n        firstPage: options.firstPageButton,\n        lastPage: options.lastPageButton,\n        pageRotateCw: options.pageRotateCwButton,\n        pageRotateCcw: options.pageRotateCcwButton,\n      };\n\n      this.mainContainer = mainContainer;\n      this.eventBus = eventBus;\n\n      this.opened = false;\n      this.containerHeight = null;\n      this.previousContainerHeight = null;\n\n      this.reset();\n\n      // Bind the event listeners for click, cursor tool, and scroll/spread mode\n      // actions.\n      this._bindClickListeners();\n      this._bindCursorToolsListener(options);\n      this._bindScrollModeListener(options);\n      this._bindSpreadModeListener(options);\n\n      // Bind the event listener for adjusting the 'max-height' of the toolbar.\n      this.eventBus._on(\"resize\", this._setMaxHeight.bind(this));\n\n      // Hide the Scroll/Spread mode buttons, when they're not applicable to the\n      // current `BaseViewer` instance (in particular `PDFSinglePageViewer`).\n      this.eventBus._on(\"baseviewerinit\", evt => {\n        if (evt.source instanceof PDFSinglePageViewer) {\n          this.toolbarButtonContainer.classList.add(\n            \"hiddenScrollModeButtons\",\n            \"hiddenSpreadModeButtons\"\n          );\n        } else {\n          this.toolbarButtonContainer.classList.remove(\n            \"hiddenScrollModeButtons\",\n            \"hiddenSpreadModeButtons\"\n          );\n        }\n      });\n    }\n\n    /**\n     * @type {boolean}\n     */\n    get isOpen() {\n      return this.opened;\n    }\n\n    setPageNumber(pageNumber) {\n      this.pageNumber = pageNumber;\n      this._updateUIState();\n    }\n\n    setPagesCount(pagesCount) {\n      this.pagesCount = pagesCount;\n      this._updateUIState();\n    }\n\n    reset() {\n      this.pageNumber = 0;\n      this.pagesCount = 0;\n      this._updateUIState();\n\n      // Reset the Scroll/Spread buttons too, since they're document specific.\n      this.eventBus.dispatch(\"secondarytoolbarreset\", { source: this });\n    }\n\n    _updateUIState() {\n      this.items.firstPage.disabled = this.pageNumber <= 1;\n      this.items.lastPage.disabled = this.pageNumber >= this.pagesCount;\n      this.items.pageRotateCw.disabled = this.pagesCount === 0;\n      this.items.pageRotateCcw.disabled = this.pagesCount === 0;\n    }\n\n    _bindClickListeners() {\n      // Button to toggle the visibility of the secondary toolbar.\n      this.toggleButton.addEventListener(\"click\", this.toggle.bind(this));\n\n      // All items within the secondary toolbar.\n      for (const { element, eventName, close, eventDetails } of this.buttons) {\n        element.addEventListener(\"click\", evt => {\n          if (eventName !== null) {\n            const details = { source: this };\n            for (const property in eventDetails) {\n              details[property] = eventDetails[property];\n            }\n            this.eventBus.dispatch(eventName, details);\n          }\n          if (close) {\n            this.close();\n          }\n        });\n      }\n    }\n\n    _bindCursorToolsListener(buttons) {\n      this.eventBus._on(\"cursortoolchanged\", function ({ tool }) {\n        buttons.cursorSelectToolButton.classList.toggle(\n          \"toggled\",\n          tool === CursorTool.SELECT\n        );\n        buttons.cursorHandToolButton.classList.toggle(\n          \"toggled\",\n          tool === CursorTool.HAND\n        );\n      });\n    }\n\n    _bindScrollModeListener(buttons) {\n      function scrollModeChanged({ mode }) {\n        buttons.scrollVerticalButton.classList.toggle(\n          \"toggled\",\n          mode === ScrollMode.VERTICAL\n        );\n        buttons.scrollHorizontalButton.classList.toggle(\n          \"toggled\",\n          mode === ScrollMode.HORIZONTAL\n        );\n        buttons.scrollWrappedButton.classList.toggle(\n          \"toggled\",\n          mode === ScrollMode.WRAPPED\n        );\n\n        // Temporarily *disable* the Spread buttons when horizontal scrolling is\n        // enabled, since the non-default Spread modes doesn't affect the layout.\n        const isScrollModeHorizontal = mode === ScrollMode.HORIZONTAL;\n        buttons.spreadNoneButton.disabled = isScrollModeHorizontal;\n        buttons.spreadOddButton.disabled = isScrollModeHorizontal;\n        buttons.spreadEvenButton.disabled = isScrollModeHorizontal;\n      }\n      this.eventBus._on(\"scrollmodechanged\", scrollModeChanged);\n\n      this.eventBus._on(\"secondarytoolbarreset\", evt => {\n        if (evt.source === this) {\n          scrollModeChanged({ mode: ScrollMode.VERTICAL });\n        }\n      });\n    }\n\n    _bindSpreadModeListener(buttons) {\n      function spreadModeChanged({ mode }) {\n        buttons.spreadNoneButton.classList.toggle(\n          \"toggled\",\n          mode === SpreadMode.NONE\n        );\n        buttons.spreadOddButton.classList.toggle(\n          \"toggled\",\n          mode === SpreadMode.ODD\n        );\n        buttons.spreadEvenButton.classList.toggle(\n          \"toggled\",\n          mode === SpreadMode.EVEN\n        );\n      }\n      this.eventBus._on(\"spreadmodechanged\", spreadModeChanged);\n\n      this.eventBus._on(\"secondarytoolbarreset\", evt => {\n        if (evt.source === this) {\n          spreadModeChanged({ mode: SpreadMode.NONE });\n        }\n      });\n    }\n\n    open() {\n      if (this.opened) {\n        return;\n      }\n      this.opened = true;\n      this._setMaxHeight();\n\n      this.toggleButton.classList.add(\"toggled\");\n      this.toolbar.classList.remove(\"hidden\");\n    }\n\n    close() {\n      if (!this.opened) {\n        return;\n      }\n      this.opened = false;\n      this.toolbar.classList.add(\"hidden\");\n      this.toggleButton.classList.remove(\"toggled\");\n    }\n\n    toggle() {\n      if (this.opened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _setMaxHeight() {\n      if (!this.opened) {\n        return; // Only adjust the 'max-height' if the toolbar is visible.\n      }\n      this.containerHeight = this.mainContainer.clientHeight;\n\n      if (this.containerHeight === this.previousContainerHeight) {\n        return;\n      }\n      this.toolbarButtonContainer.style.maxHeight = `${\n        this.containerHeight - SCROLLBAR_PADDING\n      }px`;\n\n      this.previousContainerHeight = this.containerHeight;\n    }\n  }\n\n  return { SecondaryToolbar };\n});"]}