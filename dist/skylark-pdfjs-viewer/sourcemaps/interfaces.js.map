{"version":3,"sources":["interfaces.js"],"names":["define","IL10n","[object Object]","key","args","fallback","element","IPDFAnnotationLayerFactory","pageDiv","pdfPage","annotationStorage","imageResourcesPath","renderInteractiveForms","l10n","enableScripting","hasJSActionsPromise","mouseState","IPDFHistory","fingerprint","resetHistory","updateUrl","namedDest","explicitDest","pageNumber","IPDFLinkService","pagesCount","page","value","rotation","externalLinkEnabled","dest","val","hash","action","pageNum","pageRef","IPDFTextLayerFactory","textLayerDiv","pageIndex","viewport","enhanceTextSelection","eventBus","IRenderableView","renderingId","renderingState"],"mappings":";;;;;;;AAAAA,UAAU,WAgPR,OACEC,YA3BAC,qBAKAA,sBAWAA,UAAUC,EAAKC,EAAMC,IAOrBH,gBAAgBI,MAKhBC,iCAhDAL,6BACEM,EACAC,EACAC,EAAoB,KACpBC,EAAqB,GACrBC,GAAyB,EACzBC,EACAC,GAAkB,EAClBC,EAAsB,KACtBC,EAAa,SAwCfC,kBAnIAf,YAAWgB,YAAEA,EAAWC,aAAEA,GAAe,EAAKC,UAAEA,GAAY,KAE5DlB,SAKAA,MAAKmB,UAAEA,EAAY,KAAIC,aAAEA,EAAYC,WAAEA,KAKvCrB,SAASqB,IAETrB,uBAEAA,QAEAA,aAkHAsB,sBA5NAC,kBAKAC,YAKAA,SAASC,IAKTC,gBAKAA,aAAaD,IAKbE,2BAKAA,wBAAwBF,IAKxBzB,sBAAsB4B,IAKtB5B,SAAS6B,IAMT7B,mBAAmB4B,IAMnB5B,aAAa8B,IAKb9B,QAAQ8B,IAKR9B,mBAAmB+B,IAMnB/B,aAAagC,EAASC,IAKtBjC,cAAcqB,IAKdrB,aAAaqB,MA+Iba,2BA9EAlC,uBACEmC,EACAC,EACAC,EACAC,GAAuB,EACvBC,MA0EFC,sBA1GAC,mBAKAC,sBAKA1C,QAEAA","file":"../interfaces.js","sourcesContent":["define([],function(){\n  /* Copyright 2018 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /* eslint-disable getter-return */\n\n  /**\n   * @interface\n   */\n  class IPDFLinkService {\n    /**\n     * @type {number}\n     */\n    get pagesCount() {}\n\n    /**\n     * @type {number}\n     */\n    get page() {}\n\n    /**\n     * @param {number} value\n     */\n    set page(value) {}\n\n    /**\n     * @type {number}\n     */\n    get rotation() {}\n\n    /**\n     * @param {number} value\n     */\n    set rotation(value) {}\n\n    /**\n     * @type {boolean}\n     */\n    get externalLinkEnabled() {}\n\n    /**\n     * @param {boolean} value\n     */\n    set externalLinkEnabled(value) {}\n\n    /**\n     * @param {string|Array} dest - The named, or explicit, PDF destination.\n     */\n    async goToDestination(dest) {}\n\n    /**\n     * @param {number|string} val - The page number, or page label.\n     */\n    goToPage(val) {}\n\n    /**\n     * @param dest - The PDF destination object.\n     * @returns {string} The hyperlink to the PDF object.\n     */\n    getDestinationHash(dest) {}\n\n    /**\n     * @param hash - The PDF parameters/hash.\n     * @returns {string} The hyperlink to the PDF object.\n     */\n    getAnchorUrl(hash) {}\n\n    /**\n     * @param {string} hash\n     */\n    setHash(hash) {}\n\n    /**\n     * @param {string} action\n     */\n    executeNamedAction(action) {}\n\n    /**\n     * @param {number} pageNum - page number.\n     * @param {Object} pageRef - reference to the page.\n     */\n    cachePageRef(pageNum, pageRef) {}\n\n    /**\n     * @param {number} pageNumber\n     */\n    isPageVisible(pageNumber) {}\n\n    /**\n     * @param {number} pageNumber\n     */\n    isPageCached(pageNumber) {}\n  }\n\n  /**\n   * @interface\n   */\n  class IPDFHistory {\n    /**\n     * @param {Object} params\n     */\n    initialize({ fingerprint, resetHistory = false, updateUrl = false }) {}\n\n    reset() {}\n\n    /**\n     * @param {Object} params\n     */\n    push({ namedDest = null, explicitDest, pageNumber }) {}\n\n    /**\n     * @param {number} pageNumber\n     */\n    pushPage(pageNumber) {}\n\n    pushCurrentPosition() {}\n\n    back() {}\n\n    forward() {}\n  }\n\n  /**\n   * @interface\n   */\n  class IRenderableView {\n    /**\n     * @type {string} - Unique ID for rendering queue.\n     */\n    get renderingId() {}\n\n    /**\n     * @type {RenderingStates}\n     */\n    get renderingState() {}\n\n    /**\n     * @returns {Promise} Resolved on draw completion.\n     */\n    draw() {}\n\n    resume() {}\n  }\n\n  /**\n   * @interface\n   */\n  class IPDFTextLayerFactory {\n    /**\n     * @param {HTMLDivElement} textLayerDiv\n     * @param {number} pageIndex\n     * @param {PageViewport} viewport\n     * @param {boolean} enhanceTextSelection\n     * @param {EventBus} eventBus\n     * @returns {TextLayerBuilder}\n     */\n    createTextLayerBuilder(\n      textLayerDiv,\n      pageIndex,\n      viewport,\n      enhanceTextSelection = false,\n      eventBus\n    ) {}\n  }\n\n  /**\n   * @interface\n   */\n  class IPDFAnnotationLayerFactory {\n    /**\n     * @param {HTMLDivElement} pageDiv\n     * @param {PDFPage} pdfPage\n     * @param {AnnotationStorage} [annotationStorage] - Storage for annotation\n     *   data in forms.\n     * @param {string} [imageResourcesPath] - Path for image resources, mainly\n     *   for annotation icons. Include trailing slash.\n     * @param {boolean} renderInteractiveForms\n     * @param {IL10n} l10n\n     * @param {boolean} [enableScripting]\n     * @param {Promise<boolean>} [hasJSActionsPromise]\n     * @param {Object} [mouseState]\n     * @returns {AnnotationLayerBuilder}\n     */\n    createAnnotationLayerBuilder(\n      pageDiv,\n      pdfPage,\n      annotationStorage = null,\n      imageResourcesPath = \"\",\n      renderInteractiveForms = true,\n      l10n = undefined,\n      enableScripting = false,\n      hasJSActionsPromise = null,\n      mouseState = null\n    ) {}\n  }\n\n  /**\n   * @interface\n   */\n  class IL10n {\n    /**\n     * @returns {Promise<string>} - Resolves to the current locale.\n     */\n    async getLanguage() {}\n\n    /**\n     * @returns {Promise<string>} - Resolves to 'rtl' or 'ltr'.\n     */\n    async getDirection() {}\n\n    /**\n     * Translates text identified by the key and adds/formats data using the args\n     * property bag. If the key was not found, translation falls back to the\n     * fallback text.\n     * @param {string} key\n     * @param {object} args\n     * @param {string} fallback\n     * @returns {Promise<string>}\n     */\n    async get(key, args, fallback) {}\n\n    /**\n     * Translates HTML element.\n     * @param {HTMLElement} element\n     * @returns {Promise<void>}\n     */\n    async translate(element) {}\n  }\n\n  return {\n    IL10n,\n    IPDFAnnotationLayerFactory,\n    IPDFHistory,\n    IPDFLinkService,\n    IPDFTextLayerFactory,\n    IRenderableView,\n  };\n});"]}