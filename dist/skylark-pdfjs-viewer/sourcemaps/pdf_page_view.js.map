{"version":3,"sources":["pdf_page_view.js"],"names":["define","pdfjsLib","PDFJSDev","ui_utils","pdf_rendering_queue","viewer_compatibility","approximateFraction","CSS_UNITS","DEFAULT_SCALE","getOutputScale","NullL10n","RendererType","roundToDivide","TextLayerMode","createPromiseCapability","RenderingCancelledException","SVGGraphics","RenderingStates","viewerCompatibilityParams","MAX_CANVAS_PIXELS","maxCanvasPixels","PDFPageView","[object Object]","options","container","defaultViewport","this","id","renderingId","pdfPage","pageLabel","rotation","scale","viewport","pdfPageRotate","_optionalContentConfigPromise","optionalContentConfigPromise","hasRestrictedScaling","textLayerMode","Number","isInteger","ENABLE","imageResourcesPath","renderInteractiveForms","useOnlyCssZoom","eventBus","renderingQueue","textLayerFactory","annotationLayerFactory","renderer","CANVAS","enableWebGL","l10n","enableScripting","paintTask","paintedViewportMap","WeakMap","renderingState","INITIAL","resume","_renderError","annotationLayer","textLayer","zoomLayer","div","document","createElement","className","style","width","Math","floor","height","setAttribute","appendChild","rotate","totalRotation","getViewport","reset","cleanup","error","render","ex","dispatch","source","pageNumber","removeFromDOM","zoomLayerCanvas","firstChild","delete","remove","keepZoomLayer","keepAnnotations","cancelRendering","childNodes","currentZoomLayerNode","currentAnnotationNode","i","length","node","removeChild","removeAttribute","hide","cancel","canvas","_resetZoomLayer","svg","loadingIconDiv","Promise","clone","cssTransform","timestamp","performance","now","isScalingRestricted","outputScale","sx","sy","hasAttribute","parentNode","position","target","redrawAnnotations","relativeRotation","get","absRotation","abs","scaleX","scaleY","transform","textLayerViewport","textRelativeRotation","textAbsRotation","textLayerDiv","transX","transY","console","transformOrigin","_renderAnnotationLayer","x","y","convertToPdfPoint","FINISHED","reject","Error","RUNNING","canvasWrapper","classList","add","insertBefore","DISABLE","createTextLayerBuilder","ENABLE_ENHANCE","renderContinueCallback","cont","isHighestPriority","PAUSED","finishPaintTask","async","SVG","paintOnSvg","paintOnCanvas","onRenderContinue","resultPromise","promise","then","readableStream","streamTextContent","normalizeWhitespace","setTextContentStream","reason","createAnnotationLayerBuilder","renderCapability","result","renderTask","page","msg","isCanvasHidden","showCanvas","test","mozOpaque","ctx","getContext","alpha","actualSizeViewport","scaled","pixelsInViewport","maxScale","sqrt","sfx","sfy","set","renderContext","canvasContext","onContinue","resolve","undefined","wrapper","cancelled","ensureNotCancelled","getOperatorList","opList","commonObjs","objs","getSVG","label"],"mappings":"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","file":"../pdf_page_view.js","sourcesContent":["define([\n  \"skylark-pdfjs-display\",\n  \"./pdfjs_dev\",\n  \"./ui_utils\",\n  \"./pdf_rendering_queue\",\n  \"./viewer_compatibility\"\n],function(\n  pdfjsLib,\n  PDFJSDev,\n  ui_utils,\n  pdf_rendering_queue,\n  viewer_compatibility\n){\n  /* Copyright 2012 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const {\n    approximateFraction,\n    CSS_UNITS,\n    DEFAULT_SCALE,\n    getOutputScale,\n    NullL10n,\n    RendererType,\n    roundToDivide,\n    TextLayerMode,\n  } = ui_utils;\n  const {\n    createPromiseCapability,\n    RenderingCancelledException,\n    SVGGraphics,\n  } = pdfjsLib;\n  const { RenderingStates } = pdf_rendering_queue;\n  const { viewerCompatibilityParams } = viewer_compatibility;\n\n  /**\n   * @typedef {Object} PDFPageViewOptions\n   * @property {HTMLDivElement} container - The viewer element.\n   * @property {EventBus} eventBus - The application event bus.\n   * @property {number} id - The page unique ID (normally its number).\n   * @property {number} scale - The page scale display.\n   * @property {PageViewport} defaultViewport - The page viewport.\n   * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n   *   A promise that is resolved with an {@link OptionalContentConfig} instance.\n   *   The default value is `null`.\n   * @property {PDFRenderingQueue} renderingQueue - The rendering queue object.\n   * @property {IPDFTextLayerFactory} textLayerFactory\n   * @property {number} [textLayerMode] - Controls if the text layer used for\n   *   selection and searching is created, and if the improved text selection\n   *   behaviour is enabled. The constants from {TextLayerMode} should be used.\n   *   The default value is `TextLayerMode.ENABLE`.\n   * @property {IPDFAnnotationLayerFactory} annotationLayerFactory\n   * @property {string} [imageResourcesPath] - Path for image resources, mainly\n   *   for annotation icons. Include trailing slash.\n   * @property {boolean} renderInteractiveForms - Turns on rendering of\n   *   interactive form elements. The default value is `true`.\n   * @property {string} renderer - 'canvas' or 'svg'. The default is 'canvas'.\n   * @property {boolean} [enableWebGL] - Enables WebGL accelerated rendering for\n   *   some operations. The default value is `false`.\n   * @property {boolean} [useOnlyCssZoom] - Enables CSS only zooming. The default\n   *   value is `false`.\n   * @property {number} [maxCanvasPixels] - The maximum supported canvas size in\n   *   total pixels, i.e. width * height. Use -1 for no limit. The default value\n   *   is 4096 * 4096 (16 mega-pixels).\n   * @property {IL10n} l10n - Localization service.\n   * @property {boolean} [enableScripting] - Enable embedded script execution.\n   *   The default value is `false`.\n   */\n\n  const MAX_CANVAS_PIXELS = viewerCompatibilityParams.maxCanvasPixels || 16777216;\n\n  /**\n   * @implements {IRenderableView}\n   */\n  class PDFPageView {\n    /**\n     * @param {PDFPageViewOptions} options\n     */\n    constructor(options) {\n      const container = options.container;\n      const defaultViewport = options.defaultViewport;\n\n      this.id = options.id;\n      this.renderingId = \"page\" + this.id;\n\n      this.pdfPage = null;\n      this.pageLabel = null;\n      this.rotation = 0;\n      this.scale = options.scale || DEFAULT_SCALE;\n      this.viewport = defaultViewport;\n      this.pdfPageRotate = defaultViewport.rotation;\n      this._optionalContentConfigPromise =\n        options.optionalContentConfigPromise || null;\n      this.hasRestrictedScaling = false;\n      this.textLayerMode = Number.isInteger(options.textLayerMode)\n        ? options.textLayerMode\n        : TextLayerMode.ENABLE;\n      this.imageResourcesPath = options.imageResourcesPath || \"\";\n      this.renderInteractiveForms =\n        typeof options.renderInteractiveForms === \"boolean\"\n          ? options.renderInteractiveForms\n          : true;\n      this.useOnlyCssZoom = options.useOnlyCssZoom || false;\n      this.maxCanvasPixels = options.maxCanvasPixels || MAX_CANVAS_PIXELS;\n\n      this.eventBus = options.eventBus;\n      this.renderingQueue = options.renderingQueue;\n      this.textLayerFactory = options.textLayerFactory;\n      this.annotationLayerFactory = options.annotationLayerFactory;\n      this.renderer = options.renderer || RendererType.CANVAS;\n      this.enableWebGL = options.enableWebGL || false;\n      this.l10n = options.l10n || NullL10n;\n      this.enableScripting = options.enableScripting || false;\n\n      this.paintTask = null;\n      this.paintedViewportMap = new WeakMap();\n      this.renderingState = RenderingStates.INITIAL;\n      this.resume = null;\n      this._renderError = null;\n\n      this.annotationLayer = null;\n      this.textLayer = null;\n      this.zoomLayer = null;\n\n      const div = document.createElement(\"div\");\n      div.className = \"page\";\n      div.style.width = Math.floor(this.viewport.width) + \"px\";\n      div.style.height = Math.floor(this.viewport.height) + \"px\";\n      div.setAttribute(\"data-page-number\", this.id);\n      this.div = div;\n\n      container.appendChild(div);\n    }\n\n    setPdfPage(pdfPage) {\n      this.pdfPage = pdfPage;\n      this.pdfPageRotate = pdfPage.rotate;\n\n      const totalRotation = (this.rotation + this.pdfPageRotate) % 360;\n      this.viewport = pdfPage.getViewport({\n        scale: this.scale * CSS_UNITS,\n        rotation: totalRotation,\n      });\n      this.reset();\n    }\n\n    destroy() {\n      this.reset();\n      if (this.pdfPage) {\n        this.pdfPage.cleanup();\n      }\n    }\n\n    /**\n     * @private\n     */\n    async _renderAnnotationLayer() {\n      let error = null;\n      try {\n        await this.annotationLayer.render(this.viewport, \"display\");\n      } catch (ex) {\n        error = ex;\n      } finally {\n        this.eventBus.dispatch(\"annotationlayerrendered\", {\n          source: this,\n          pageNumber: this.id,\n          error,\n        });\n      }\n    }\n\n    /**\n     * @private\n     */\n    _resetZoomLayer(removeFromDOM = false) {\n      if (!this.zoomLayer) {\n        return;\n      }\n      const zoomLayerCanvas = this.zoomLayer.firstChild;\n      this.paintedViewportMap.delete(zoomLayerCanvas);\n      // Zeroing the width and height causes Firefox to release graphics\n      // resources immediately, which can greatly reduce memory consumption.\n      zoomLayerCanvas.width = 0;\n      zoomLayerCanvas.height = 0;\n\n      if (removeFromDOM) {\n        // Note: `ChildNode.remove` doesn't throw if the parent node is undefined.\n        this.zoomLayer.remove();\n      }\n      this.zoomLayer = null;\n    }\n\n    reset(keepZoomLayer = false, keepAnnotations = false) {\n      this.cancelRendering(keepAnnotations);\n      this.renderingState = RenderingStates.INITIAL;\n\n      const div = this.div;\n      div.style.width = Math.floor(this.viewport.width) + \"px\";\n      div.style.height = Math.floor(this.viewport.height) + \"px\";\n\n      const childNodes = div.childNodes;\n      const currentZoomLayerNode = (keepZoomLayer && this.zoomLayer) || null;\n      const currentAnnotationNode =\n        (keepAnnotations && this.annotationLayer && this.annotationLayer.div) ||\n        null;\n      for (let i = childNodes.length - 1; i >= 0; i--) {\n        const node = childNodes[i];\n        if (currentZoomLayerNode === node || currentAnnotationNode === node) {\n          continue;\n        }\n        div.removeChild(node);\n      }\n      div.removeAttribute(\"data-loaded\");\n\n      if (currentAnnotationNode) {\n        // Hide the annotation layer until all elements are resized\n        // so they are not displayed on the already resized page.\n        this.annotationLayer.hide();\n      } else if (this.annotationLayer) {\n        this.annotationLayer.cancel();\n        this.annotationLayer = null;\n      }\n\n      if (!currentZoomLayerNode) {\n        if (this.canvas) {\n          this.paintedViewportMap.delete(this.canvas);\n          // Zeroing the width and height causes Firefox to release graphics\n          // resources immediately, which can greatly reduce memory consumption.\n          this.canvas.width = 0;\n          this.canvas.height = 0;\n          delete this.canvas;\n        }\n        this._resetZoomLayer();\n      }\n      if (this.svg) {\n        this.paintedViewportMap.delete(this.svg);\n        delete this.svg;\n      }\n\n      this.loadingIconDiv = document.createElement(\"div\");\n      this.loadingIconDiv.className = \"loadingIcon\";\n      div.appendChild(this.loadingIconDiv);\n    }\n\n    update(scale, rotation, optionalContentConfigPromise = null) {\n      this.scale = scale || this.scale;\n      // The rotation may be zero.\n      if (typeof rotation !== \"undefined\") {\n        this.rotation = rotation;\n      }\n      if (optionalContentConfigPromise instanceof Promise) {\n        this._optionalContentConfigPromise = optionalContentConfigPromise;\n      }\n\n      const totalRotation = (this.rotation + this.pdfPageRotate) % 360;\n      this.viewport = this.viewport.clone({\n        scale: this.scale * CSS_UNITS,\n        rotation: totalRotation,\n      });\n\n      if (this.svg) {\n        this.cssTransform(this.svg, true);\n\n        this.eventBus.dispatch(\"pagerendered\", {\n          source: this,\n          pageNumber: this.id,\n          cssTransform: true,\n          timestamp: performance.now(),\n          error: this._renderError,\n        });\n        return;\n      }\n\n      let isScalingRestricted = false;\n      if (this.canvas && this.maxCanvasPixels > 0) {\n        const outputScale = this.outputScale;\n        if (\n          ((Math.floor(this.viewport.width) * outputScale.sx) | 0) *\n            ((Math.floor(this.viewport.height) * outputScale.sy) | 0) >\n          this.maxCanvasPixels\n        ) {\n          isScalingRestricted = true;\n        }\n      }\n\n      if (this.canvas) {\n        if (\n          this.useOnlyCssZoom ||\n          (this.hasRestrictedScaling && isScalingRestricted)\n        ) {\n          this.cssTransform(this.canvas, true);\n\n          this.eventBus.dispatch(\"pagerendered\", {\n            source: this,\n            pageNumber: this.id,\n            cssTransform: true,\n            timestamp: performance.now(),\n            error: this._renderError,\n          });\n          return;\n        }\n        if (!this.zoomLayer && !this.canvas.hasAttribute(\"hidden\")) {\n          this.zoomLayer = this.canvas.parentNode;\n          this.zoomLayer.style.position = \"absolute\";\n        }\n      }\n      if (this.zoomLayer) {\n        this.cssTransform(this.zoomLayer.firstChild);\n      }\n      this.reset(/* keepZoomLayer = */ true, /* keepAnnotations = */ true);\n    }\n\n    /**\n     * PLEASE NOTE: Most likely you want to use the `this.reset()` method,\n     *              rather than calling this one directly.\n     */\n    cancelRendering(keepAnnotations = false) {\n      if (this.paintTask) {\n        this.paintTask.cancel();\n        this.paintTask = null;\n      }\n      this.resume = null;\n\n      if (this.textLayer) {\n        this.textLayer.cancel();\n        this.textLayer = null;\n      }\n      if (!keepAnnotations && this.annotationLayer) {\n        this.annotationLayer.cancel();\n        this.annotationLayer = null;\n      }\n    }\n\n    cssTransform(target, redrawAnnotations = false) {\n      // Scale target (canvas or svg), its wrapper and page container.\n      const width = this.viewport.width;\n      const height = this.viewport.height;\n      const div = this.div;\n      target.style.width = target.parentNode.style.width = div.style.width =\n        Math.floor(width) + \"px\";\n      target.style.height = target.parentNode.style.height = div.style.height =\n        Math.floor(height) + \"px\";\n      // The canvas may have been originally rotated; rotate relative to that.\n      const relativeRotation =\n        this.viewport.rotation - this.paintedViewportMap.get(target).rotation;\n      const absRotation = Math.abs(relativeRotation);\n      let scaleX = 1,\n        scaleY = 1;\n      if (absRotation === 90 || absRotation === 270) {\n        // Scale x and y because of the rotation.\n        scaleX = height / width;\n        scaleY = width / height;\n      }\n      target.style.transform = `rotate(${relativeRotation}deg) scale(${scaleX}, ${scaleY})`;\n\n      if (this.textLayer) {\n        // Rotating the text layer is more complicated since the divs inside the\n        // the text layer are rotated.\n        // TODO: This could probably be simplified by drawing the text layer in\n        // one orientation and then rotating overall.\n        const textLayerViewport = this.textLayer.viewport;\n        const textRelativeRotation =\n          this.viewport.rotation - textLayerViewport.rotation;\n        const textAbsRotation = Math.abs(textRelativeRotation);\n        let scale = width / textLayerViewport.width;\n        if (textAbsRotation === 90 || textAbsRotation === 270) {\n          scale = width / textLayerViewport.height;\n        }\n        const textLayerDiv = this.textLayer.textLayerDiv;\n        let transX, transY;\n        switch (textAbsRotation) {\n          case 0:\n            transX = transY = 0;\n            break;\n          case 90:\n            transX = 0;\n            transY = \"-\" + textLayerDiv.style.height;\n            break;\n          case 180:\n            transX = \"-\" + textLayerDiv.style.width;\n            transY = \"-\" + textLayerDiv.style.height;\n            break;\n          case 270:\n            transX = \"-\" + textLayerDiv.style.width;\n            transY = 0;\n            break;\n          default:\n            console.error(\"Bad rotation value.\");\n            break;\n        }\n\n        textLayerDiv.style.transform =\n          `rotate(${textAbsRotation}deg) ` +\n          `scale(${scale}) ` +\n          `translate(${transX}, ${transY})`;\n        textLayerDiv.style.transformOrigin = \"0% 0%\";\n      }\n\n      if (redrawAnnotations && this.annotationLayer) {\n        this._renderAnnotationLayer();\n      }\n    }\n\n    get width() {\n      return this.viewport.width;\n    }\n\n    get height() {\n      return this.viewport.height;\n    }\n\n    getPagePoint(x, y) {\n      return this.viewport.convertToPdfPoint(x, y);\n    }\n\n    draw() {\n      if (this.renderingState !== RenderingStates.INITIAL) {\n        console.error(\"Must be in new state before drawing\");\n        this.reset(); // Ensure that we reset all state to prevent issues.\n      }\n      const { div, pdfPage } = this;\n\n      if (!pdfPage) {\n        this.renderingState = RenderingStates.FINISHED;\n\n        if (this.loadingIconDiv) {\n          div.removeChild(this.loadingIconDiv);\n          delete this.loadingIconDiv;\n        }\n        return Promise.reject(new Error(\"pdfPage is not loaded\"));\n      }\n\n      this.renderingState = RenderingStates.RUNNING;\n\n      // Wrap the canvas so that if it has a CSS transform for high DPI the\n      // overflow will be hidden in Firefox.\n      const canvasWrapper = document.createElement(\"div\");\n      canvasWrapper.style.width = div.style.width;\n      canvasWrapper.style.height = div.style.height;\n      canvasWrapper.classList.add(\"canvasWrapper\");\n\n      if (this.annotationLayer && this.annotationLayer.div) {\n        // The annotation layer needs to stay on top.\n        div.insertBefore(canvasWrapper, this.annotationLayer.div);\n      } else {\n        div.appendChild(canvasWrapper);\n      }\n\n      let textLayer = null;\n      if (this.textLayerMode !== TextLayerMode.DISABLE && this.textLayerFactory) {\n        const textLayerDiv = document.createElement(\"div\");\n        textLayerDiv.className = \"textLayer\";\n        textLayerDiv.style.width = canvasWrapper.style.width;\n        textLayerDiv.style.height = canvasWrapper.style.height;\n        if (this.annotationLayer && this.annotationLayer.div) {\n          // The annotation layer needs to stay on top.\n          div.insertBefore(textLayerDiv, this.annotationLayer.div);\n        } else {\n          div.appendChild(textLayerDiv);\n        }\n\n        textLayer = this.textLayerFactory.createTextLayerBuilder(\n          textLayerDiv,\n          this.id - 1,\n          this.viewport,\n          this.textLayerMode === TextLayerMode.ENABLE_ENHANCE,\n          this.eventBus\n        );\n      }\n      this.textLayer = textLayer;\n\n      let renderContinueCallback = null;\n      if (this.renderingQueue) {\n        renderContinueCallback = cont => {\n          if (!this.renderingQueue.isHighestPriority(this)) {\n            this.renderingState = RenderingStates.PAUSED;\n            this.resume = () => {\n              this.renderingState = RenderingStates.RUNNING;\n              cont();\n            };\n            return;\n          }\n          cont();\n        };\n      }\n\n      const finishPaintTask = async (error = null) => {\n        // The paintTask may have been replaced by a new one, so only remove\n        // the reference to the paintTask if it matches the one that is\n        // triggering this callback.\n        if (paintTask === this.paintTask) {\n          this.paintTask = null;\n        }\n\n        if (error instanceof RenderingCancelledException) {\n          this._renderError = null;\n          return;\n        }\n        this._renderError = error;\n\n        this.renderingState = RenderingStates.FINISHED;\n\n        if (this.loadingIconDiv) {\n          div.removeChild(this.loadingIconDiv);\n          delete this.loadingIconDiv;\n        }\n        this._resetZoomLayer(/* removeFromDOM = */ true);\n\n        this.eventBus.dispatch(\"pagerendered\", {\n          source: this,\n          pageNumber: this.id,\n          cssTransform: false,\n          timestamp: performance.now(),\n          error: this._renderError,\n        });\n\n        if (error) {\n          throw error;\n        }\n      };\n\n      const paintTask =\n        this.renderer === RendererType.SVG\n          ? this.paintOnSvg(canvasWrapper)\n          : this.paintOnCanvas(canvasWrapper);\n      paintTask.onRenderContinue = renderContinueCallback;\n      this.paintTask = paintTask;\n\n      const resultPromise = paintTask.promise.then(\n        function () {\n          return finishPaintTask(null).then(function () {\n            if (textLayer) {\n              const readableStream = pdfPage.streamTextContent({\n                normalizeWhitespace: true,\n              });\n              textLayer.setTextContentStream(readableStream);\n              textLayer.render();\n            }\n          });\n        },\n        function (reason) {\n          return finishPaintTask(reason);\n        }\n      );\n\n      if (this.annotationLayerFactory) {\n        if (!this.annotationLayer) {\n          this.annotationLayer = this.annotationLayerFactory.createAnnotationLayerBuilder(\n            div,\n            pdfPage,\n            /* annotationStorage = */ null,\n            this.imageResourcesPath,\n            this.renderInteractiveForms,\n            this.l10n,\n            this.enableScripting,\n            /* hasJSActionsPromise = */ null,\n            /* mouseState = */ null\n          );\n        }\n        this._renderAnnotationLayer();\n      }\n      div.setAttribute(\"data-loaded\", true);\n\n      this.eventBus.dispatch(\"pagerender\", {\n        source: this,\n        pageNumber: this.id,\n      });\n      return resultPromise;\n    }\n\n    paintOnCanvas(canvasWrapper) {\n      const renderCapability = createPromiseCapability();\n      const result = {\n        promise: renderCapability.promise,\n        onRenderContinue(cont) {\n          cont();\n        },\n        cancel() {\n          renderTask.cancel();\n        },\n      };\n\n      const viewport = this.viewport;\n      const canvas = document.createElement(\"canvas\");\n      this.l10n\n        .get(\"page_canvas\", { page: this.id }, \"Page {{page}}\")\n        .then(msg => {\n          canvas.setAttribute(\"aria-label\", msg);\n        });\n\n      // Keep the canvas hidden until the first draw callback, or until drawing\n      // is complete when `!this.renderingQueue`, to prevent black flickering.\n      canvas.setAttribute(\"hidden\", \"hidden\");\n      let isCanvasHidden = true;\n      const showCanvas = function () {\n        if (isCanvasHidden) {\n          canvas.removeAttribute(\"hidden\");\n          isCanvasHidden = false;\n        }\n      };\n\n      canvasWrapper.appendChild(canvas);\n      this.canvas = canvas;\n\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n      ) {\n        canvas.mozOpaque = true;\n      }\n\n      const ctx = canvas.getContext(\"2d\", { alpha: false });\n      const outputScale = getOutputScale(ctx);\n      this.outputScale = outputScale;\n\n      if (this.useOnlyCssZoom) {\n        const actualSizeViewport = viewport.clone({ scale: CSS_UNITS });\n        // Use a scale that makes the canvas have the originally intended size\n        // of the page.\n        outputScale.sx *= actualSizeViewport.width / viewport.width;\n        outputScale.sy *= actualSizeViewport.height / viewport.height;\n        outputScale.scaled = true;\n      }\n\n      if (this.maxCanvasPixels > 0) {\n        const pixelsInViewport = viewport.width * viewport.height;\n        const maxScale = Math.sqrt(this.maxCanvasPixels / pixelsInViewport);\n        if (outputScale.sx > maxScale || outputScale.sy > maxScale) {\n          outputScale.sx = maxScale;\n          outputScale.sy = maxScale;\n          outputScale.scaled = true;\n          this.hasRestrictedScaling = true;\n        } else {\n          this.hasRestrictedScaling = false;\n        }\n      }\n\n      const sfx = approximateFraction(outputScale.sx);\n      const sfy = approximateFraction(outputScale.sy);\n      canvas.width = roundToDivide(viewport.width * outputScale.sx, sfx[0]);\n      canvas.height = roundToDivide(viewport.height * outputScale.sy, sfy[0]);\n      canvas.style.width = roundToDivide(viewport.width, sfx[1]) + \"px\";\n      canvas.style.height = roundToDivide(viewport.height, sfy[1]) + \"px\";\n      // Add the viewport so it's known what it was originally drawn with.\n      this.paintedViewportMap.set(canvas, viewport);\n\n      // Rendering area\n      const transform = !outputScale.scaled\n        ? null\n        : [outputScale.sx, 0, 0, outputScale.sy, 0, 0];\n      const renderContext = {\n        canvasContext: ctx,\n        transform,\n        viewport: this.viewport,\n        enableWebGL: this.enableWebGL,\n        renderInteractiveForms: this.renderInteractiveForms,\n        optionalContentConfigPromise: this._optionalContentConfigPromise,\n      };\n      const renderTask = this.pdfPage.render(renderContext);\n      renderTask.onContinue = function (cont) {\n        showCanvas();\n        if (result.onRenderContinue) {\n          result.onRenderContinue(cont);\n        } else {\n          cont();\n        }\n      };\n\n      renderTask.promise.then(\n        function () {\n          showCanvas();\n          renderCapability.resolve(undefined);\n        },\n        function (error) {\n          showCanvas();\n          renderCapability.reject(error);\n        }\n      );\n      return result;\n    }\n\n    paintOnSvg(wrapper) {\n      if (\n        typeof PDFJSDev !== \"undefined\" &&\n        PDFJSDev.test(\"MOZCENTRAL || CHROME\")\n      ) {\n        // Return a mock object, to prevent errors such as e.g.\n        // \"TypeError: paintTask.promise is undefined\".\n        return {\n          promise: Promise.reject(new Error(\"SVG rendering is not supported.\")),\n          onRenderContinue(cont) {},\n          cancel() {},\n        };\n      }\n\n      let cancelled = false;\n      const ensureNotCancelled = () => {\n        if (cancelled) {\n          throw new RenderingCancelledException(\n            `Rendering cancelled, page ${this.id}`,\n            \"svg\"\n          );\n        }\n      };\n\n      const pdfPage = this.pdfPage;\n      const actualSizeViewport = this.viewport.clone({ scale: CSS_UNITS });\n      const promise = pdfPage.getOperatorList().then(opList => {\n        ensureNotCancelled();\n        const svgGfx = new SVGGraphics(pdfPage.commonObjs, pdfPage.objs);\n        return svgGfx.getSVG(opList, actualSizeViewport).then(svg => {\n          ensureNotCancelled();\n          this.svg = svg;\n          this.paintedViewportMap.set(svg, actualSizeViewport);\n\n          svg.style.width = wrapper.style.width;\n          svg.style.height = wrapper.style.height;\n          this.renderingState = RenderingStates.FINISHED;\n          wrapper.appendChild(svg);\n        });\n      });\n\n      return {\n        promise,\n        onRenderContinue(cont) {\n          cont();\n        },\n        cancel() {\n          cancelled = true;\n        },\n      };\n    }\n\n    /**\n     * @param {string|null} label\n     */\n    setPageLabel(label) {\n      this.pageLabel = typeof label === \"string\" ? label : null;\n\n      if (this.pageLabel !== null) {\n        this.div.setAttribute(\"data-page-label\", this.pageLabel);\n      } else {\n        this.div.removeAttribute(\"data-page-label\");\n      }\n    }\n  }\n\n  return { PDFPageView };\n});"]}