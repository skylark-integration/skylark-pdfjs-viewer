{"version":3,"sources":["pdf_thumbnail_viewer.js"],"names":["define","ui_utils","pdf_thumbnail_view","pdf_rendering_queue","getVisibleElements","isValidRotation","NullL10n","scrollIntoView","watchScroll","PDFThumbnailView","TempImageFactory","RenderingStates","THUMBNAIL_SCROLL_MARGIN","THUMBNAIL_SELECTED_CLASS","PDFThumbnailViewer","[object Object]","container","eventBus","linkService","renderingQueue","l10n","this","scroll","_scrollUpdated","bind","_resetView","_on","_setImageDisabled","renderHighestPriority","index","_thumbnails","scrollEl","views","pageNumber","pdfDocument","thumbnailView","console","error","_currentPageNumber","div","classList","remove","add","visibleThumbs","_getVisibleThumbs","numVisibleThumbs","length","first","id","last","shouldScroll","some","view","percent","top","pagesRotation","_pagesRotation","rotation","Error","i","ii","update","renderingState","FINISHED","reset","destroyCanvas","_pageLabels","_optionalContentConfigPromise","_pagesRequests","WeakMap","textContent","_cancelRendering","firstPagePromise","getPage","optionalContentConfigPromise","getOptionalContentConfig","then","firstPdfPage","pagesCount","numPages","viewport","getViewport","scale","checkSetImageDisabled","pageNum","thumbnail","defaultViewport","clone","disableCanvasToImageConversion","push","firstThumbnailView","setPdfPage","catch","reason","cancelRendering","labels","Array","isArray","label","setPageLabel","thumbView","pdfPage","Promise","resolve","has","get","promise","delete","set","getHighestPriority","down","_ensurePdfPageLoaded","renderView"],"mappings":";;;;;;;AAAAA,QACE,aACA,uBACA,yBACA,SAASC,EAASC,EAAmBC,GAgBrC,MAAMC,mBACJA,EAAkBC,gBAClBA,EAAeC,SACfA,EAAQC,eACRA,EAAcC,YACdA,GACEP,GACEQ,iBAAEA,EAAgBC,iBAAEA,GAAqBR,GACzCS,gBAAEA,GAAoBR,EAEtBS,GAA2B,GAC3BC,EAA2B,WAwSjC,OAASC,yBAnRPC,aAAYC,UACVA,EAASC,SACTA,EAAQC,YACRA,EAAWC,eACXA,EAAcC,KACdA,EAAOd,IAEPe,KAAKL,UAAYA,EACjBK,KAAKH,YAAcA,EACnBG,KAAKF,eAAiBA,EACtBE,KAAKD,KAAOA,EAEZC,KAAKC,OAASd,EAAYa,KAAKL,UAAWK,KAAKE,eAAeC,KAAKH,OACnEA,KAAKI,aAELR,EAASS,IAAI,+BAAgC,KAG3CL,KAAKM,mBAAoB,IAO7BZ,iBACEM,KAAKF,eAAeS,wBAGtBb,aAAac,GACX,OAAOR,KAAKS,YAAYD,GAM1Bd,oBACE,OAAOX,GACL2B,SAAUV,KAAKL,UACfgB,MAAOX,KAAKS,cAIhBf,wBAAwBkB,GACtB,IAAKZ,KAAKa,YACR,OAEF,MAAMC,EAAgBd,KAAKS,YAAYG,EAAa,GAEpD,IAAKE,EAEH,YADAC,QAAQC,MAAM,4DAIZJ,IAAeZ,KAAKiB,qBACIjB,KAAKS,YAAYT,KAAKiB,mBAAqB,GAEnDC,IAAIC,UAAUC,OAAO5B,GAEvCsB,EAAcI,IAAIC,UAAUE,IAAI7B,IAElC,MAAM8B,EAAgBtB,KAAKuB,oBACrBC,EAAmBF,EAAcX,MAAMc,OAG7C,GAAID,EAAmB,EAAG,CACxB,MAAME,EAAQJ,EAAcI,MAAMC,GAE5BC,EAAOJ,EAAmB,EAAIF,EAAcM,KAAKD,GAAKD,EAE5D,IAAIG,GAAe,EACfjB,GAAcc,GAASd,GAAcgB,EACvCC,GAAe,EAEfP,EAAcX,MAAMmB,KAAK,SAAUC,GACjC,OAAIA,EAAKJ,KAAOf,IAGhBiB,EAAeE,EAAKC,QAAU,KACvB,KAGPH,GACF3C,EAAe4B,EAAcI,KAAOe,IAAK1C,IAI7CS,KAAKiB,mBAAqBL,EAG5BsB,oBACE,OAAOlC,KAAKmC,eAGdD,kBAAkBE,GAChB,IAAKpD,EAAgBoD,GACnB,MAAM,IAAIC,MAAM,sCAElB,GAAKrC,KAAKa,aAGNb,KAAKmC,iBAAmBC,EAA5B,CAGApC,KAAKmC,eAAiBC,EAEtB,IAAK,IAAIE,EAAI,EAAGC,EAAKvC,KAAKS,YAAYgB,OAAQa,EAAIC,EAAID,IACpDtC,KAAKS,YAAY6B,GAAGE,OAAOJ,IAI/B1C,UACE,IAAK,IAAI4C,EAAI,EAAGC,EAAKvC,KAAKS,YAAYgB,OAAQa,EAAIC,EAAID,IAElDtC,KAAKS,YAAY6B,IACjBtC,KAAKS,YAAY6B,GAAGG,iBAAmBnD,EAAgBoD,UAEvD1C,KAAKS,YAAY6B,GAAGK,QAGxBtD,EAAiBuD,gBAMnBlD,aACEM,KAAKS,eACLT,KAAKiB,mBAAqB,EAC1BjB,KAAK6C,YAAc,KACnB7C,KAAKmC,eAAiB,EACtBnC,KAAK8C,8BAAgC,KACrC9C,KAAK+C,eAAiB,IAAIC,QAC1BhD,KAAKM,mBAAoB,EAGzBN,KAAKL,UAAUsD,YAAc,GAG/BvD,YAAYmB,GAOV,GANIb,KAAKa,cACPb,KAAKkD,mBACLlD,KAAKI,cAGPJ,KAAKa,YAAcA,GACdA,EACH,OAEF,MAAMsC,EAAmBtC,EAAYuC,QAAQ,GACvCC,EAA+BxC,EAAYyC,2BAEjDH,EACGI,KAAKC,IACJxD,KAAK8C,8BAAgCO,EAErC,MAAMI,EAAa5C,EAAY6C,SACzBC,EAAWH,EAAaI,aAAcC,MAAO,IAC7CC,EAAwB,IACrB9D,KAAKM,kBAGd,IAAK,IAAIyD,EAAU,EAAGA,GAAWN,IAAcM,EAAS,CACtD,MAAMC,EAAY,IAAI5E,GACpBO,UAAWK,KAAKL,UAChBgC,GAAIoC,EACJE,gBAAiBN,EAASO,QAC1Bb,6BAAAA,EACAxD,YAAaG,KAAKH,YAClBC,eAAgBE,KAAKF,eACrBgE,sBAAAA,EACAK,gCAAgC,EAChCpE,KAAMC,KAAKD,OAEbC,KAAKS,YAAY2D,KAAKJ,GAKxB,MAAMK,EAAqBrE,KAAKS,YAAY,GACxC4D,GACFA,EAAmBC,WAAWd,GAIVxD,KAAKS,YAAYT,KAAKiB,mBAAqB,GACnDC,IAAIC,UAAUE,IAAI7B,KAEjC+E,MAAMC,IACLzD,QAAQC,MAAM,wCAAyCwD,KAO7D9E,mBACE,IAAK,IAAI4C,EAAI,EAAGC,EAAKvC,KAAKS,YAAYgB,OAAQa,EAAIC,EAAID,IAChDtC,KAAKS,YAAY6B,IACnBtC,KAAKS,YAAY6B,GAAGmC,kBAQ1B/E,cAAcgF,GACZ,GAAK1E,KAAKa,YAAV,CAGK6D,EAGDC,MAAMC,QAAQF,IAAW1E,KAAKa,YAAY6C,WAAagB,EAAOjD,OAKhEzB,KAAK6C,YAAc6B,GAHnB1E,KAAK6C,YAAc,KACnB9B,QAAQC,MAAM,2DALdhB,KAAK6C,YAAc,KAUrB,IAAK,IAAIP,EAAI,EAAGC,EAAKvC,KAAKS,YAAYgB,OAAQa,EAAIC,EAAID,IAAK,CACzD,MAAMuC,EAAQ7E,KAAK6C,aAAe7C,KAAK6C,YAAYP,GACnDtC,KAAKS,YAAY6B,GAAGwC,aAAaD,KASrCnF,qBAAqBqF,GACnB,GAAIA,EAAUC,QACZ,OAAOC,QAAQC,QAAQH,EAAUC,SAEnC,GAAIhF,KAAK+C,eAAeoC,IAAIJ,GAC1B,OAAO/E,KAAK+C,eAAeqC,IAAIL,GAEjC,MAAMM,EAAUrF,KAAKa,YAClBuC,QAAQ2B,EAAUpD,IAClB4B,KAAKyB,IACCD,EAAUC,SACbD,EAAUT,WAAWU,GAEvBhF,KAAK+C,eAAeuC,OAAOP,GACpBC,IAERT,MAAMC,IACLzD,QAAQC,MAAM,oCAAqCwD,GAEnDxE,KAAK+C,eAAeuC,OAAOP,KAG/B,OADA/E,KAAK+C,eAAewC,IAAIR,EAAWM,GAC5BA,EAGT3F,iBACE,MAAM4B,EAAgBtB,KAAKuB,oBACrBwD,EAAY/E,KAAKF,eAAe0F,mBACpClE,EACAtB,KAAKS,YACLT,KAAKC,OAAOwF,MAEd,QAAIV,IACF/E,KAAK0F,qBAAqBX,GAAWxB,KAAK,KACxCvD,KAAKF,eAAe6F,WAAWZ,MAE1B","file":"../pdf_thumbnail_viewer.js","sourcesContent":["define([\n  \"./ui_utils\",\n  \"./pdf_thumbnail_view\",\n  \"./pdf_rendering_queue\"\n],function(ui_utils,pdf_thumbnail_view,pdf_rendering_queue){\n  /* Copyright 2012 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const {\n    getVisibleElements,\n    isValidRotation,\n    NullL10n,\n    scrollIntoView,\n    watchScroll,\n  } = ui_utils;\n  const { PDFThumbnailView, TempImageFactory } = pdf_thumbnail_view;\n  const { RenderingStates } = pdf_rendering_queue;\n\n  const THUMBNAIL_SCROLL_MARGIN = -19;\n  const THUMBNAIL_SELECTED_CLASS = \"selected\";\n\n  /**\n   * @typedef {Object} PDFThumbnailViewerOptions\n   * @property {HTMLDivElement} container - The container for the thumbnail\n   *   elements.\n   * @property {EventBus} eventBus - The application event bus.\n   * @property {IPDFLinkService} linkService - The navigation/linking service.\n   * @property {PDFRenderingQueue} renderingQueue - The rendering queue object.\n   * @property {IL10n} l10n - Localization service.\n   */\n\n  /**\n   * Viewer control to display thumbnails for pages in a PDF document.\n   *\n   * @implements {IRenderableView}\n   */\n  class PDFThumbnailViewer {\n    /**\n     * @param {PDFThumbnailViewerOptions} options\n     */\n    constructor({\n      container,\n      eventBus,\n      linkService,\n      renderingQueue,\n      l10n = NullL10n,\n    }) {\n      this.container = container;\n      this.linkService = linkService;\n      this.renderingQueue = renderingQueue;\n      this.l10n = l10n;\n\n      this.scroll = watchScroll(this.container, this._scrollUpdated.bind(this));\n      this._resetView();\n\n      eventBus._on(\"optionalcontentconfigchanged\", () => {\n        // Ensure that the thumbnails always render with the *default* optional\n        // content configuration.\n        this._setImageDisabled = true;\n      });\n    }\n\n    /**\n     * @private\n     */\n    _scrollUpdated() {\n      this.renderingQueue.renderHighestPriority();\n    }\n\n    getThumbnail(index) {\n      return this._thumbnails[index];\n    }\n\n    /**\n     * @private\n     */\n    _getVisibleThumbs() {\n      return getVisibleElements({\n        scrollEl: this.container,\n        views: this._thumbnails,\n      });\n    }\n\n    scrollThumbnailIntoView(pageNumber) {\n      if (!this.pdfDocument) {\n        return;\n      }\n      const thumbnailView = this._thumbnails[pageNumber - 1];\n\n      if (!thumbnailView) {\n        console.error('scrollThumbnailIntoView: Invalid \"pageNumber\" parameter.');\n        return;\n      }\n\n      if (pageNumber !== this._currentPageNumber) {\n        const prevThumbnailView = this._thumbnails[this._currentPageNumber - 1];\n        // Remove the highlight from the previous thumbnail...\n        prevThumbnailView.div.classList.remove(THUMBNAIL_SELECTED_CLASS);\n        // ... and add the highlight to the new thumbnail.\n        thumbnailView.div.classList.add(THUMBNAIL_SELECTED_CLASS);\n      }\n      const visibleThumbs = this._getVisibleThumbs();\n      const numVisibleThumbs = visibleThumbs.views.length;\n\n      // If the thumbnail isn't currently visible, scroll it into view.\n      if (numVisibleThumbs > 0) {\n        const first = visibleThumbs.first.id;\n        // Account for only one thumbnail being visible.\n        const last = numVisibleThumbs > 1 ? visibleThumbs.last.id : first;\n\n        let shouldScroll = false;\n        if (pageNumber <= first || pageNumber >= last) {\n          shouldScroll = true;\n        } else {\n          visibleThumbs.views.some(function (view) {\n            if (view.id !== pageNumber) {\n              return false;\n            }\n            shouldScroll = view.percent < 100;\n            return true;\n          });\n        }\n        if (shouldScroll) {\n          scrollIntoView(thumbnailView.div, { top: THUMBNAIL_SCROLL_MARGIN });\n        }\n      }\n\n      this._currentPageNumber = pageNumber;\n    }\n\n    get pagesRotation() {\n      return this._pagesRotation;\n    }\n\n    set pagesRotation(rotation) {\n      if (!isValidRotation(rotation)) {\n        throw new Error(\"Invalid thumbnails rotation angle.\");\n      }\n      if (!this.pdfDocument) {\n        return;\n      }\n      if (this._pagesRotation === rotation) {\n        return; // The rotation didn't change.\n      }\n      this._pagesRotation = rotation;\n\n      for (let i = 0, ii = this._thumbnails.length; i < ii; i++) {\n        this._thumbnails[i].update(rotation);\n      }\n    }\n\n    cleanup() {\n      for (let i = 0, ii = this._thumbnails.length; i < ii; i++) {\n        if (\n          this._thumbnails[i] &&\n          this._thumbnails[i].renderingState !== RenderingStates.FINISHED\n        ) {\n          this._thumbnails[i].reset();\n        }\n      }\n      TempImageFactory.destroyCanvas();\n    }\n\n    /**\n     * @private\n     */\n    _resetView() {\n      this._thumbnails = [];\n      this._currentPageNumber = 1;\n      this._pageLabels = null;\n      this._pagesRotation = 0;\n      this._optionalContentConfigPromise = null;\n      this._pagesRequests = new WeakMap();\n      this._setImageDisabled = false;\n\n      // Remove the thumbnails from the DOM.\n      this.container.textContent = \"\";\n    }\n\n    setDocument(pdfDocument) {\n      if (this.pdfDocument) {\n        this._cancelRendering();\n        this._resetView();\n      }\n\n      this.pdfDocument = pdfDocument;\n      if (!pdfDocument) {\n        return;\n      }\n      const firstPagePromise = pdfDocument.getPage(1);\n      const optionalContentConfigPromise = pdfDocument.getOptionalContentConfig();\n\n      firstPagePromise\n        .then(firstPdfPage => {\n          this._optionalContentConfigPromise = optionalContentConfigPromise;\n\n          const pagesCount = pdfDocument.numPages;\n          const viewport = firstPdfPage.getViewport({ scale: 1 });\n          const checkSetImageDisabled = () => {\n            return this._setImageDisabled;\n          };\n\n          for (let pageNum = 1; pageNum <= pagesCount; ++pageNum) {\n            const thumbnail = new PDFThumbnailView({\n              container: this.container,\n              id: pageNum,\n              defaultViewport: viewport.clone(),\n              optionalContentConfigPromise,\n              linkService: this.linkService,\n              renderingQueue: this.renderingQueue,\n              checkSetImageDisabled,\n              disableCanvasToImageConversion: false,\n              l10n: this.l10n,\n            });\n            this._thumbnails.push(thumbnail);\n          }\n          // Set the first `pdfPage` immediately, since it's already loaded,\n          // rather than having to repeat the `PDFDocumentProxy.getPage` call in\n          // the `this._ensurePdfPageLoaded` method before rendering can start.\n          const firstThumbnailView = this._thumbnails[0];\n          if (firstThumbnailView) {\n            firstThumbnailView.setPdfPage(firstPdfPage);\n          }\n\n          // Ensure that the current thumbnail is always highlighted on load.\n          const thumbnailView = this._thumbnails[this._currentPageNumber - 1];\n          thumbnailView.div.classList.add(THUMBNAIL_SELECTED_CLASS);\n        })\n        .catch(reason => {\n          console.error(\"Unable to initialize thumbnail viewer\", reason);\n        });\n    }\n\n    /**\n     * @private\n     */\n    _cancelRendering() {\n      for (let i = 0, ii = this._thumbnails.length; i < ii; i++) {\n        if (this._thumbnails[i]) {\n          this._thumbnails[i].cancelRendering();\n        }\n      }\n    }\n\n    /**\n     * @param {Array|null} labels\n     */\n    setPageLabels(labels) {\n      if (!this.pdfDocument) {\n        return;\n      }\n      if (!labels) {\n        this._pageLabels = null;\n      } else if (\n        !(Array.isArray(labels) && this.pdfDocument.numPages === labels.length)\n      ) {\n        this._pageLabels = null;\n        console.error(\"PDFThumbnailViewer_setPageLabels: Invalid page labels.\");\n      } else {\n        this._pageLabels = labels;\n      }\n      // Update all the `PDFThumbnailView` instances.\n      for (let i = 0, ii = this._thumbnails.length; i < ii; i++) {\n        const label = this._pageLabels && this._pageLabels[i];\n        this._thumbnails[i].setPageLabel(label);\n      }\n    }\n\n    /**\n     * @param {PDFThumbnailView} thumbView\n     * @returns {PDFPage}\n     * @private\n     */\n    _ensurePdfPageLoaded(thumbView) {\n      if (thumbView.pdfPage) {\n        return Promise.resolve(thumbView.pdfPage);\n      }\n      if (this._pagesRequests.has(thumbView)) {\n        return this._pagesRequests.get(thumbView);\n      }\n      const promise = this.pdfDocument\n        .getPage(thumbView.id)\n        .then(pdfPage => {\n          if (!thumbView.pdfPage) {\n            thumbView.setPdfPage(pdfPage);\n          }\n          this._pagesRequests.delete(thumbView);\n          return pdfPage;\n        })\n        .catch(reason => {\n          console.error(\"Unable to get page for thumb view\", reason);\n          // Page error -- there is nothing that can be done.\n          this._pagesRequests.delete(thumbView);\n        });\n      this._pagesRequests.set(thumbView, promise);\n      return promise;\n    }\n\n    forceRendering() {\n      const visibleThumbs = this._getVisibleThumbs();\n      const thumbView = this.renderingQueue.getHighestPriority(\n        visibleThumbs,\n        this._thumbnails,\n        this.scroll.down\n      );\n      if (thumbView) {\n        this._ensurePdfPageLoaded(thumbView).then(() => {\n          this.renderingQueue.renderView(thumbView);\n        });\n        return true;\n      }\n      return false;\n    }\n  }\n\n  return { PDFThumbnailViewer };\n});"]}