{"version":3,"sources":["pdf_sidebar_resizer.js"],"names":["define","ui_utils","NullL10n","SIDEBAR_WIDTH_VAR","SIDEBAR_MIN_WIDTH","SIDEBAR_RESIZING_CLASS","PDFSidebarResizer","[object Object]","options","eventBus","l10n","this","isRTL","sidebarOpen","doc","document","documentElement","_width","_outerContainerWidth","_boundEvents","Object","create","outerContainer","resizer","getDirection","then","dir","_addEventListeners","outerContainerWidth","clientWidth","width","maxWidth","Math","floor","style","setProperty","evt","clientX","_updateWidth","classList","remove","dispatch","source","window","removeEventListener","mouseMove","mouseUp","_mouseMove","bind","_mouseUp","addEventListener","button","add","_on","view","updated","Promise","resolve"],"mappings":";;;;;;;AAAAA,QACE,cACA,SAASC,GAgBT,MAAMC,SAAEA,GAAaD,EAEfE,EAAoB,kBACpBC,EAAoB,IACpBC,EAAyB,kBAuJ/B,OAASC,wBAvIPC,YAAYC,EAASC,EAAUC,EAAOR,GACpCS,KAAKC,OAAQ,EACbD,KAAKE,aAAc,EACnBF,KAAKG,IAAMC,SAASC,gBACpBL,KAAKM,OAAS,KACdN,KAAKO,qBAAuB,KAC5BP,KAAKQ,aAAeC,OAAOC,OAAO,MAElCV,KAAKW,eAAiBd,EAAQc,eAC9BX,KAAKY,QAAUf,EAAQe,QACvBZ,KAAKF,SAAWA,EAEhBC,EAAKc,eAAeC,KAAKC,IACvBf,KAAKC,MAAgB,QAARc,IAEff,KAAKgB,qBAMPC,0BAIE,OAHKjB,KAAKO,uBACRP,KAAKO,qBAAuBP,KAAKW,eAAeO,aAE3ClB,KAAKO,qBAOdX,aAAauB,EAAQ,GAGnB,MAAMC,EAAWC,KAAKC,MAAMtB,KAAKiB,oBAAsB,GAQvD,OAPIE,EAAQC,IACVD,EAAQC,GAEND,EAAQ1B,IACV0B,EAAQ1B,GAGN0B,IAAUnB,KAAKM,SAGnBN,KAAKM,OAASa,EACdnB,KAAKG,IAAIoB,MAAMC,YAAYhC,KAAsB2B,QAC1C,GAMTvB,WAAW6B,GACT,IAAIN,EAAQM,EAAIC,QAEZ1B,KAAKC,QACPkB,EAAQnB,KAAKiB,oBAAsBE,GAErCnB,KAAK2B,aAAaR,GAMpBvB,SAAS6B,GAEPzB,KAAKW,eAAeiB,UAAUC,OAAOnC,GAErCM,KAAKF,SAASgC,SAAS,UAAYC,OAAQ/B,OAE3C,MAAMQ,EAAeR,KAAKQ,aAC1BwB,OAAOC,oBAAoB,YAAazB,EAAa0B,WACrDF,OAAOC,oBAAoB,UAAWzB,EAAa2B,SAMrDvC,qBACE,MAAMY,EAAeR,KAAKQ,aAC1BA,EAAa0B,UAAYlC,KAAKoC,WAAWC,KAAKrC,MAC9CQ,EAAa2B,QAAUnC,KAAKsC,SAASD,KAAKrC,MAE1CA,KAAKY,QAAQ2B,iBAAiB,YAAad,IACtB,IAAfA,EAAIe,SAKRxC,KAAKW,eAAeiB,UAAUa,IAAI/C,GAElCsC,OAAOO,iBAAiB,YAAa/B,EAAa0B,WAClDF,OAAOO,iBAAiB,UAAW/B,EAAa2B,YAGlDnC,KAAKF,SAAS4C,IAAI,qBAAsBjB,IACtCzB,KAAKE,eAAiBuB,IAAOA,EAAIkB,QAGnC3C,KAAKF,SAAS4C,IAAI,SAAUjB,IAG1B,IAAKA,GAAOA,EAAIM,SAAWC,OACzB,OAKF,GAFAhC,KAAKO,qBAAuB,MAEvBP,KAAKM,OAER,OAIF,IAAKN,KAAKE,YAER,YADAF,KAAK2B,aAAa3B,KAAKM,QAGzBN,KAAKW,eAAeiB,UAAUa,IAAI/C,GAClC,MAAMkD,EAAU5C,KAAK2B,aAAa3B,KAAKM,QAEvCuC,QAAQC,UAAUhC,KAAK,KACrBd,KAAKW,eAAeiB,UAAUC,OAAOnC,GAGjCkD,GACF5C,KAAKF,SAASgC,SAAS,UAAYC,OAAQ/B","file":"../pdf_sidebar_resizer.js","sourcesContent":["define([\n  \"./ui_utils\",\n],function(ui_utils){\n  /* Copyright 2017 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { NullL10n } = ui_utils;\n\n  const SIDEBAR_WIDTH_VAR = \"--sidebar-width\";\n  const SIDEBAR_MIN_WIDTH = 200; // pixels\n  const SIDEBAR_RESIZING_CLASS = \"sidebarResizing\";\n\n  /**\n   * @typedef {Object} PDFSidebarResizerOptions\n   * @property {HTMLDivElement} outerContainer - The outer container\n   *   (encasing both the viewer and sidebar elements).\n   * @property {HTMLDivElement} resizer - The DOM element that can be dragged in\n   *   order to adjust the width of the sidebar.\n   */\n\n  class PDFSidebarResizer {\n    /**\n     * @param {PDFSidebarResizerOptions} options\n     * @param {EventBus} eventBus - The application event bus.\n     * @param {IL10n} l10n - Localization service.\n     */\n    constructor(options, eventBus, l10n = NullL10n) {\n      this.isRTL = false;\n      this.sidebarOpen = false;\n      this.doc = document.documentElement;\n      this._width = null;\n      this._outerContainerWidth = null;\n      this._boundEvents = Object.create(null);\n\n      this.outerContainer = options.outerContainer;\n      this.resizer = options.resizer;\n      this.eventBus = eventBus;\n\n      l10n.getDirection().then(dir => {\n        this.isRTL = dir === \"rtl\";\n      });\n      this._addEventListeners();\n    }\n\n    /**\n     * @type {number}\n     */\n    get outerContainerWidth() {\n      if (!this._outerContainerWidth) {\n        this._outerContainerWidth = this.outerContainer.clientWidth;\n      }\n      return this._outerContainerWidth;\n    }\n\n    /**\n     * @private\n     * returns {boolean} Indicating if the sidebar width was updated.\n     */\n    _updateWidth(width = 0) {\n      // Prevent the sidebar from becoming too narrow, or from occupying more\n      // than half of the available viewer width.\n      const maxWidth = Math.floor(this.outerContainerWidth / 2);\n      if (width > maxWidth) {\n        width = maxWidth;\n      }\n      if (width < SIDEBAR_MIN_WIDTH) {\n        width = SIDEBAR_MIN_WIDTH;\n      }\n      // Only update the UI when the sidebar width did in fact change.\n      if (width === this._width) {\n        return false;\n      }\n      this._width = width;\n      this.doc.style.setProperty(SIDEBAR_WIDTH_VAR, `${width}px`);\n      return true;\n    }\n\n    /**\n     * @private\n     */\n    _mouseMove(evt) {\n      let width = evt.clientX;\n      // For sidebar resizing to work correctly in RTL mode, invert the width.\n      if (this.isRTL) {\n        width = this.outerContainerWidth - width;\n      }\n      this._updateWidth(width);\n    }\n\n    /**\n     * @private\n     */\n    _mouseUp(evt) {\n      // Re-enable the `transition-duration` rules when sidebar resizing ends...\n      this.outerContainer.classList.remove(SIDEBAR_RESIZING_CLASS);\n      // ... and ensure that rendering will always be triggered.\n      this.eventBus.dispatch(\"resize\", { source: this });\n\n      const _boundEvents = this._boundEvents;\n      window.removeEventListener(\"mousemove\", _boundEvents.mouseMove);\n      window.removeEventListener(\"mouseup\", _boundEvents.mouseUp);\n    }\n\n    /**\n     * @private\n     */\n    _addEventListeners() {\n      const _boundEvents = this._boundEvents;\n      _boundEvents.mouseMove = this._mouseMove.bind(this);\n      _boundEvents.mouseUp = this._mouseUp.bind(this);\n\n      this.resizer.addEventListener(\"mousedown\", evt => {\n        if (evt.button !== 0) {\n          return;\n        }\n        // Disable the `transition-duration` rules when sidebar resizing begins,\n        // in order to improve responsiveness and to avoid visual glitches.\n        this.outerContainer.classList.add(SIDEBAR_RESIZING_CLASS);\n\n        window.addEventListener(\"mousemove\", _boundEvents.mouseMove);\n        window.addEventListener(\"mouseup\", _boundEvents.mouseUp);\n      });\n\n      this.eventBus._on(\"sidebarviewchanged\", evt => {\n        this.sidebarOpen = !!(evt && evt.view);\n      });\n\n      this.eventBus._on(\"resize\", evt => {\n        // When the *entire* viewer is resized, such that it becomes narrower,\n        // ensure that the sidebar doesn't end up being too wide.\n        if (!evt || evt.source !== window) {\n          return;\n        }\n        // Always reset the cached width when the viewer is resized.\n        this._outerContainerWidth = null;\n\n        if (!this._width) {\n          // The sidebar hasn't been resized, hence no need to adjust its width.\n          return;\n        }\n        // NOTE: If the sidebar is closed, we don't need to worry about\n        //       visual glitches nor ensure that rendering is triggered.\n        if (!this.sidebarOpen) {\n          this._updateWidth(this._width);\n          return;\n        }\n        this.outerContainer.classList.add(SIDEBAR_RESIZING_CLASS);\n        const updated = this._updateWidth(this._width);\n\n        Promise.resolve().then(() => {\n          this.outerContainer.classList.remove(SIDEBAR_RESIZING_CLASS);\n          // Trigger rendering if the sidebar width changed, to avoid\n          // depending on the order in which 'resize' events are handled.\n          if (updated) {\n            this.eventBus.dispatch(\"resize\", { source: this });\n          }\n        });\n      });\n    }\n  }\n\n  return { PDFSidebarResizer };\n});"]}