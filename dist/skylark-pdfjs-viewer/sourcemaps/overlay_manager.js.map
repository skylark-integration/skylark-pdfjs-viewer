{"version":3,"sources":["overlay_manager.js"],"names":["define","OverlayManager","[object Object]","this","_overlays","_active","_keyDownBound","_keyDown","bind","active","name","element","callerCloseMethod","canForceClose","container","parentNode","Error","_closeThroughCaller","classList","remove","window","addEventListener","add","removeEventListener","evt","keyCode","preventDefault","close"],"mappings":";;;;;;;AAAAA,UAAU,WA6IR,OAASC,qBA5HPC,cACEC,KAAKC,aACLD,KAAKE,QAAU,KACfF,KAAKG,cAAgBH,KAAKI,SAASC,KAAKL,MAG1CM,aACE,OAAON,KAAKE,QAgBdH,eACEQ,EACAC,EACAC,EAAoB,KACpBC,GAAgB,GAEhB,IAAIC,EACJ,KAAKJ,GAASC,IAAaG,EAAYH,EAAQI,aAC7C,MAAM,IAAIC,MAAM,0BACX,GAAIb,KAAKC,UAAUM,GACxB,MAAM,IAAIM,MAAM,sCAElBb,KAAKC,UAAUM,IACbC,QAAAA,EACAG,UAAAA,EACAF,kBAAAA,EACAC,cAAAA,GASJX,iBAAiBQ,GACf,IAAKP,KAAKC,UAAUM,GAClB,MAAM,IAAIM,MAAM,+BACX,GAAIb,KAAKE,UAAYK,EAC1B,MAAM,IAAIM,MAAM,4DAEXb,KAAKC,UAAUM,GAQxBR,WAAWQ,GACT,IAAKP,KAAKC,UAAUM,GAClB,MAAM,IAAIM,MAAM,+BACX,GAAIb,KAAKE,QAAS,CACvB,IAAIF,KAAKC,UAAUM,GAAMG,cAElB,MAAIV,KAAKE,UAAYK,EACpB,IAAIM,MAAM,kCAEV,IAAIA,MAAM,wCAJhBb,KAAKc,sBAOTd,KAAKE,QAAUK,EACfP,KAAKC,UAAUD,KAAKE,SAASM,QAAQO,UAAUC,OAAO,UACtDhB,KAAKC,UAAUD,KAAKE,SAASS,UAAUI,UAAUC,OAAO,UAExDC,OAAOC,iBAAiB,UAAWlB,KAAKG,eAQ1CJ,YAAYQ,GACV,IAAKP,KAAKC,UAAUM,GAClB,MAAM,IAAIM,MAAM,+BACX,IAAKb,KAAKE,QACf,MAAM,IAAIW,MAAM,wCACX,GAAIb,KAAKE,UAAYK,EAC1B,MAAM,IAAIM,MAAM,wCAElBb,KAAKC,UAAUD,KAAKE,SAASS,UAAUI,UAAUI,IAAI,UACrDnB,KAAKC,UAAUD,KAAKE,SAASM,QAAQO,UAAUI,IAAI,UACnDnB,KAAKE,QAAU,KAEfe,OAAOG,oBAAoB,UAAWpB,KAAKG,eAM7CJ,SAASsB,GACHrB,KAAKE,SAAuC,KAA5BmB,EAAIC,UACtBtB,KAAKc,sBACLO,EAAIE,kBAORxB,sBACMC,KAAKC,UAAUD,KAAKE,SAASO,mBAC/BT,KAAKC,UAAUD,KAAKE,SAASO,oBAE3BT,KAAKE,SACPF,KAAKwB,MAAMxB,KAAKE","file":"../overlay_manager.js","sourcesContent":["define([],function(){\n  /* Copyright 2014 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  class OverlayManager {\n    constructor() {\n      this._overlays = {};\n      this._active = null;\n      this._keyDownBound = this._keyDown.bind(this);\n    }\n\n    get active() {\n      return this._active;\n    }\n\n    /**\n     * @param {string} name - The name of the overlay that is registered.\n     * @param {HTMLDivElement} element - The overlay's DOM element.\n     * @param {function} [callerCloseMethod] - The method that, if present, calls\n     *                   `OverlayManager.close` from the object registering the\n     *                   overlay. Access to this method is necessary in order to\n     *                   run cleanup code when e.g. the overlay is force closed.\n     *                   The default is `null`.\n     * @param {boolean} [canForceClose] - Indicates if opening the overlay closes\n     *                  an active overlay. The default is `false`.\n     * @returns {Promise} A promise that is resolved when the overlay has been\n     *                    registered.\n     */\n    async register(\n      name,\n      element,\n      callerCloseMethod = null,\n      canForceClose = false\n    ) {\n      let container;\n      if (!name || !element || !(container = element.parentNode)) {\n        throw new Error(\"Not enough parameters.\");\n      } else if (this._overlays[name]) {\n        throw new Error(\"The overlay is already registered.\");\n      }\n      this._overlays[name] = {\n        element,\n        container,\n        callerCloseMethod,\n        canForceClose,\n      };\n    }\n\n    /**\n     * @param {string} name - The name of the overlay that is unregistered.\n     * @returns {Promise} A promise that is resolved when the overlay has been\n     *                    unregistered.\n     */\n    async unregister(name) {\n      if (!this._overlays[name]) {\n        throw new Error(\"The overlay does not exist.\");\n      } else if (this._active === name) {\n        throw new Error(\"The overlay cannot be removed while it is active.\");\n      }\n      delete this._overlays[name];\n    }\n\n    /**\n     * @param {string} name - The name of the overlay that should be opened.\n     * @returns {Promise} A promise that is resolved when the overlay has been\n     *                    opened.\n     */\n    async open(name) {\n      if (!this._overlays[name]) {\n        throw new Error(\"The overlay does not exist.\");\n      } else if (this._active) {\n        if (this._overlays[name].canForceClose) {\n          this._closeThroughCaller();\n        } else if (this._active === name) {\n          throw new Error(\"The overlay is already active.\");\n        } else {\n          throw new Error(\"Another overlay is currently active.\");\n        }\n      }\n      this._active = name;\n      this._overlays[this._active].element.classList.remove(\"hidden\");\n      this._overlays[this._active].container.classList.remove(\"hidden\");\n\n      window.addEventListener(\"keydown\", this._keyDownBound);\n    }\n\n    /**\n     * @param {string} name - The name of the overlay that should be closed.\n     * @returns {Promise} A promise that is resolved when the overlay has been\n     *                    closed.\n     */\n    async close(name) {\n      if (!this._overlays[name]) {\n        throw new Error(\"The overlay does not exist.\");\n      } else if (!this._active) {\n        throw new Error(\"The overlay is currently not active.\");\n      } else if (this._active !== name) {\n        throw new Error(\"Another overlay is currently active.\");\n      }\n      this._overlays[this._active].container.classList.add(\"hidden\");\n      this._overlays[this._active].element.classList.add(\"hidden\");\n      this._active = null;\n\n      window.removeEventListener(\"keydown\", this._keyDownBound);\n    }\n\n    /**\n     * @private\n     */\n    _keyDown(evt) {\n      if (this._active && evt.keyCode === /* Esc = */ 27) {\n        this._closeThroughCaller();\n        evt.preventDefault();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _closeThroughCaller() {\n      if (this._overlays[this._active].callerCloseMethod) {\n        this._overlays[this._active].callerCloseMethod();\n      }\n      if (this._active) {\n        this.close(this._active);\n      }\n    }\n  }\n\n  return { OverlayManager };\n});"]}