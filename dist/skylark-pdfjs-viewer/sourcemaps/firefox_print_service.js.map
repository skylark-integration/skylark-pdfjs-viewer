{"version":3,"sources":["firefox_print_service.js"],"names":["define","pdfjsLib","ui_utils","app","RenderingCancelledException","shadow","CSS_UNITS","PDFPrintServiceFactory","composePage","pdfDocument","pageNumber","size","printContainer","printResolution","optionalContentConfigPromise","canvas","document","createElement","PRINT_UNITS","width","Math","floor","height","style","canvasWrapper","appendChild","currentRenderTask","mozPrintCallback","obj","ctx","context","save","fillStyle","fillRect","restore","thisRenderTask","getPage","then","pdfPage","cancel","renderContext","canvasContext","transform","viewport","getViewport","scale","rotation","intent","annotationStorage","render","promise","done","reason","console","error","abort","FirefoxPrintService","pagesOverview","this","_printResolution","_optionalContentConfigPromise","getOptionalContentConfig","prototype","[object Object]","querySelector","setAttribute","i","ii","length","textContent","removeAttribute","instance","supportsPrinting","createPrintService"],"mappings":";;;;;;;AAAAA,QACE,wBACA,aACA,SACA,SACAC,EACAC,EACAC,GAiBA,MAAMC,4BAAEA,EAA2BC,OAAEA,GAAWJ,GAC1CK,UAAEA,GAAcJ,GAChBK,uBAAEA,GAA2BJ,EAGnC,SAASK,EACPC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAASC,SAASC,cAAc,UAGhCC,EAAcL,EAAkB,GACtCE,EAAOI,MAAQC,KAAKC,MAAMV,EAAKQ,MAAQD,GACvCH,EAAOO,OAASF,KAAKC,MAAMV,EAAKW,OAASJ,GAGzCH,EAAOQ,MAAMJ,MAAQC,KAAKC,MAAMV,EAAKQ,MAAQb,GAAa,KAC1DS,EAAOQ,MAAMD,OAASF,KAAKC,MAAMV,EAAKW,OAAShB,GAAa,KAE5D,MAAMkB,EAAgBR,SAASC,cAAc,OAC7CO,EAAcC,YAAYV,GAC1BH,EAAea,YAAYD,GAS3B,IAAIE,EAAoB,KACxBX,EAAOY,iBAAmB,SAAUC,GAElC,MAAMC,EAAMD,EAAIE,QAEhBD,EAAIE,OACJF,EAAIG,UAAY,qBAChBH,EAAII,SAAS,EAAG,EAAGlB,EAAOI,MAAOJ,EAAOO,QACxCO,EAAIK,UAEJ,IAAIC,EAAiB,KACrB1B,EACG2B,QAAQ1B,GACR2B,KAAK,SAAUC,GACVZ,IACFA,EAAkBa,SAClBb,EAAoB,MAEtB,MAAMc,GACJC,cAAeZ,EACfa,WAAYxB,EAAa,EAAG,EAAGA,EAAa,EAAG,GAC/CyB,SAAUL,EAAQM,aAAcC,MAAO,EAAGC,SAAUnC,EAAKmC,WACzDC,OAAQ,QACRC,kBAAmBvC,EAAYuC,kBAC/BlC,6BAAAA,GAGF,OADAY,EAAoBS,EAAiBG,EAAQW,OAAOT,GAC7CL,EAAee,UAEvBb,KACC,WAEMX,IAAsBS,IACxBT,EAAoB,MAEtBE,EAAIuB,QAEN,SAAUC,GACFA,aAAkBhD,GACtBiD,QAAQC,MAAMF,GAGZ1B,IAAsBS,IACxBT,EAAkBa,SAClBb,EAAoB,MAKlB,UAAWE,EACbA,EAAI2B,QAEJ3B,EAAIuB,UAOhB,SAASK,EACP/C,EACAgD,EACA7C,EACAC,EACAC,EAA+B,MAE/B4C,KAAKjD,YAAcA,EACnBiD,KAAKD,cAAgBA,EACrBC,KAAK9C,eAAiBA,EACtB8C,KAAKC,iBAAmB9C,GAAmB,IAC3C6C,KAAKE,8BACH9C,GAAgCL,EAAYoD,2BA6DhD,OA1DAL,EAAoBM,WAClBC,SACE,MAAMtD,YACJA,EAAWgD,cACXA,EAAa7C,eACbA,EAAc+C,iBACdA,EAAgBC,8BAChBA,GACEF,KAES1C,SAASgD,cAAc,QAC/BC,aAAa,sBAAsB,GAExC,IAAK,IAAIC,EAAI,EAAGC,EAAKV,EAAcW,OAAQF,EAAIC,IAAMD,EACnD1D,EACEC,EACmByD,EAAI,EACvBT,EAAcS,GACdtD,EACA+C,EACAC,IAKNG,UACEL,KAAK9C,eAAeyD,YAAc,GAErBrD,SAASgD,cAAc,QAC/BM,gBAAgB,wBAIzB/D,EAAuBgE,UACrBC,uBACE,MAAMzD,EAASC,SAASC,cAAc,UAGtC,OAAOZ,EAAOqD,KAAM,mBAFN,qBAAsB3C,IAKtC0D,mBAAkB,CAChBhE,EACAgD,EACA7C,EACAC,EACAC,IAEO,IAAI0C,EACT/C,EACAgD,EACA7C,EACAC,EACAC,KAKG0C,oBAAAA","file":"../firefox_print_service.js","sourcesContent":["define([\n  \"skylark-pdfjs-display\",\n  \"./ui_utils\",\n  \"./app\"\n],function(\n  pdfjsLib,\n  ui_utils,\n  app\n){\n  /* Copyright 2016 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { RenderingCancelledException, shadow } = pdfjsLib;\n  const { CSS_UNITS } = ui_utils;\n  const { PDFPrintServiceFactory } = app;\n\n  // Creates a placeholder with div and canvas with right size for the page.\n  function composePage(\n    pdfDocument,\n    pageNumber,\n    size,\n    printContainer,\n    printResolution,\n    optionalContentConfigPromise\n  ) {\n    const canvas = document.createElement(\"canvas\");\n\n    // The size of the canvas in pixels for printing.\n    const PRINT_UNITS = printResolution / 72.0;\n    canvas.width = Math.floor(size.width * PRINT_UNITS);\n    canvas.height = Math.floor(size.height * PRINT_UNITS);\n\n    // The physical size of the canvas as specified by the PDF document.\n    canvas.style.width = Math.floor(size.width * CSS_UNITS) + \"px\";\n    canvas.style.height = Math.floor(size.height * CSS_UNITS) + \"px\";\n\n    const canvasWrapper = document.createElement(\"div\");\n    canvasWrapper.appendChild(canvas);\n    printContainer.appendChild(canvasWrapper);\n\n    // A callback for a given page may be executed multiple times for different\n    // print operations (think of changing the print settings in the browser).\n    //\n    // Since we don't support queueing multiple render tasks for the same page\n    // (and it'd be racy anyways if painting the page is not done in one go) we\n    // keep track of the last scheduled task in order to properly cancel it before\n    // starting the next one.\n    let currentRenderTask = null;\n    canvas.mozPrintCallback = function (obj) {\n      // Printing/rendering the page.\n      const ctx = obj.context;\n\n      ctx.save();\n      ctx.fillStyle = \"rgb(255, 255, 255)\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.restore();\n\n      let thisRenderTask = null;\n      pdfDocument\n        .getPage(pageNumber)\n        .then(function (pdfPage) {\n          if (currentRenderTask) {\n            currentRenderTask.cancel();\n            currentRenderTask = null;\n          }\n          const renderContext = {\n            canvasContext: ctx,\n            transform: [PRINT_UNITS, 0, 0, PRINT_UNITS, 0, 0],\n            viewport: pdfPage.getViewport({ scale: 1, rotation: size.rotation }),\n            intent: \"print\",\n            annotationStorage: pdfDocument.annotationStorage,\n            optionalContentConfigPromise,\n          };\n          currentRenderTask = thisRenderTask = pdfPage.render(renderContext);\n          return thisRenderTask.promise;\n        })\n        .then(\n          function () {\n            // Tell the printEngine that rendering this canvas/page has finished.\n            if (currentRenderTask === thisRenderTask) {\n              currentRenderTask = null;\n            }\n            obj.done();\n          },\n          function (reason) {\n            if (!(reason instanceof RenderingCancelledException)) {\n              console.error(reason);\n            }\n\n            if (currentRenderTask === thisRenderTask) {\n              currentRenderTask.cancel();\n              currentRenderTask = null;\n            }\n\n            // Tell the printEngine that rendering this canvas/page has failed.\n            // This will make the print process stop.\n            if (\"abort\" in obj) {\n              obj.abort();\n            } else {\n              obj.done();\n            }\n          }\n        );\n    };\n  }\n\n  function FirefoxPrintService(\n    pdfDocument,\n    pagesOverview,\n    printContainer,\n    printResolution,\n    optionalContentConfigPromise = null\n  ) {\n    this.pdfDocument = pdfDocument;\n    this.pagesOverview = pagesOverview;\n    this.printContainer = printContainer;\n    this._printResolution = printResolution || 150;\n    this._optionalContentConfigPromise =\n      optionalContentConfigPromise || pdfDocument.getOptionalContentConfig();\n  }\n\n  FirefoxPrintService.prototype = {\n    layout() {\n      const {\n        pdfDocument,\n        pagesOverview,\n        printContainer,\n        _printResolution,\n        _optionalContentConfigPromise,\n      } = this;\n\n      const body = document.querySelector(\"body\");\n      body.setAttribute(\"data-pdfjsprinting\", true);\n\n      for (let i = 0, ii = pagesOverview.length; i < ii; ++i) {\n        composePage(\n          pdfDocument,\n          /* pageNumber = */ i + 1,\n          pagesOverview[i],\n          printContainer,\n          _printResolution,\n          _optionalContentConfigPromise\n        );\n      }\n    },\n\n    destroy() {\n      this.printContainer.textContent = \"\";\n\n      const body = document.querySelector(\"body\");\n      body.removeAttribute(\"data-pdfjsprinting\");\n    },\n  };\n\n  PDFPrintServiceFactory.instance = {\n    get supportsPrinting() {\n      const canvas = document.createElement(\"canvas\");\n      const value = \"mozPrintCallback\" in canvas;\n\n      return shadow(this, \"supportsPrinting\", value);\n    },\n\n    createPrintService(\n      pdfDocument,\n      pagesOverview,\n      printContainer,\n      printResolution,\n      optionalContentConfigPromise\n    ) {\n      return new FirefoxPrintService(\n        pdfDocument,\n        pagesOverview,\n        printContainer,\n        printResolution,\n        optionalContentConfigPromise\n      );\n    },\n  };\n\n  return { FirefoxPrintService };\n});"]}