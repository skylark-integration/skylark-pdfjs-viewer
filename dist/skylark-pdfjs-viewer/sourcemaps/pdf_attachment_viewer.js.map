{"version":3,"sources":["pdf_attachment_viewer.js"],"names":["define","pdfjsLib","PDFJSDev","base_tree_viewer","viewer_compatibility","createPromiseCapability","getFilenameFromUrl","BaseTreeViewer","viewerCompatibilityParams","PdfFileRegExp","PDFAttachmentViewer","[object Object]","options","super","this","downloadManager","eventBus","_on","_appendAttachment","bind","keepRenderedCapability","reset","_attachments","_renderedCapability","_pendingDispatchEvent","clearTimeout","attachmentsCount","resolve","dispatch","source","setTimeout","element","content","filename","blobUrl","onclick","viewerUrl","URL","createObjectURL","Blob","type","test","encodeURIComponent","chrome","runtime","getURL","window","open","ex","console","error","revokeObjectURL","downloadData","contentType","attachments","_dispatchEvent","names","Object","keys","sort","a","b","toLowerCase","localeCompare","fragment","document","createDocumentFragment","name","item","div","createElement","className","disableCreateObjectURL","_bindPdfLink","_bindLink","textContent","_normalizeTextContent","appendChild","_finishRendering","id","renderedPromise","promise","then","create","render"],"mappings":"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","file":"../pdf_attachment_viewer.js","sourcesContent":["define([\n  \"skylark-pdfjs-display\",\n  \"./pdfjs_dev\",\n  \"./base_tree_viewer\",\n  \"./viewer_compatibility\"\n],function(\n  pdfjsLib,\n  PDFJSDev,\n  base_tree_viewer,\n  viewer_compatibility\n){\n  /* Copyright 2012 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  const { createPromiseCapability, getFilenameFromUrl } = pdfjsLib;\n  const { BaseTreeViewer } = base_tree_viewer;\n  const { viewerCompatibilityParams } = viewer_compatibility;\n\n  const PdfFileRegExp = /\\.pdf$/i;\n\n  /**\n   * @typedef {Object} PDFAttachmentViewerOptions\n   * @property {HTMLDivElement} container - The viewer element.\n   * @property {EventBus} eventBus - The application event bus.\n   * @property {DownloadManager} downloadManager - The download manager.\n   */\n\n  /**\n   * @typedef {Object} PDFAttachmentViewerRenderParameters\n   * @property {Object|null} attachments - A lookup table of attachment objects.\n   */\n\n  class PDFAttachmentViewer extends BaseTreeViewer {\n    /**\n     * @param {PDFAttachmentViewerOptions} options\n     */\n    constructor(options) {\n      super(options);\n      this.downloadManager = options.downloadManager;\n\n      this.eventBus._on(\n        \"fileattachmentannotation\",\n        this._appendAttachment.bind(this)\n      );\n    }\n\n    reset(keepRenderedCapability = false) {\n      super.reset();\n      this._attachments = null;\n\n      if (!keepRenderedCapability) {\n        // The only situation in which the `_renderedCapability` should *not* be\n        // replaced is when appending FileAttachment annotations.\n        this._renderedCapability = createPromiseCapability();\n      }\n      if (this._pendingDispatchEvent) {\n        clearTimeout(this._pendingDispatchEvent);\n      }\n      this._pendingDispatchEvent = null;\n    }\n\n    /**\n     * @private\n     */\n    _dispatchEvent(attachmentsCount) {\n      this._renderedCapability.resolve();\n\n      if (this._pendingDispatchEvent) {\n        clearTimeout(this._pendingDispatchEvent);\n        this._pendingDispatchEvent = null;\n      }\n      if (attachmentsCount === 0) {\n        // Delay the event when no \"regular\" attachments exist, to allow time for\n        // parsing of any FileAttachment annotations that may be present on the\n        // *initially* rendered page; this reduces the likelihood of temporarily\n        // disabling the attachmentsView when the `PDFSidebar` handles the event.\n        this._pendingDispatchEvent = setTimeout(() => {\n          this.eventBus.dispatch(\"attachmentsloaded\", {\n            source: this,\n            attachmentsCount: 0,\n          });\n          this._pendingDispatchEvent = null;\n        });\n        return;\n      }\n\n      this.eventBus.dispatch(\"attachmentsloaded\", {\n        source: this,\n        attachmentsCount,\n      });\n    }\n\n    /**\n     * NOTE: Should only be used when `URL.createObjectURL` is natively supported.\n     * @private\n     */\n    _bindPdfLink(element, { content, filename }) {\n      let blobUrl;\n      element.onclick = () => {\n        if (!blobUrl) {\n          blobUrl = URL.createObjectURL(\n            new Blob([content], { type: \"application/pdf\" })\n          );\n        }\n        let viewerUrl;\n        if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n          // The current URL is the viewer, let's use it and append the file.\n          viewerUrl = \"?file=\" + encodeURIComponent(blobUrl + \"#\" + filename);\n        } else if (PDFJSDev.test(\"MOZCENTRAL\")) {\n          // Let Firefox's content handler catch the URL and display the PDF.\n          viewerUrl = blobUrl + \"#filename=\" + encodeURIComponent(filename);\n        } else if (PDFJSDev.test(\"CHROME\")) {\n          // In the Chrome extension, the URL is rewritten using the history API\n          // in viewer.js, so an absolute URL must be generated.\n          viewerUrl =\n            // eslint-disable-next-line no-undef\n            chrome.runtime.getURL(\"/content/web/viewer.html\") +\n            \"?file=\" +\n            encodeURIComponent(blobUrl + \"#\" + filename);\n        }\n        try {\n          window.open(viewerUrl);\n        } catch (ex) {\n          console.error(`_bindPdfLink: ${ex}`);\n          // Release the `blobUrl`, since opening it failed...\n          URL.revokeObjectURL(blobUrl);\n          blobUrl = null;\n          // ... and fallback to downloading the PDF file.\n          this.downloadManager.downloadData(content, filename, \"application/pdf\");\n        }\n        return false;\n      };\n    }\n\n    /**\n     * @private\n     */\n    _bindLink(element, { content, filename }) {\n      element.onclick = () => {\n        const contentType = PdfFileRegExp.test(filename) ? \"application/pdf\" : \"\";\n        this.downloadManager.downloadData(content, filename, contentType);\n        return false;\n      };\n    }\n\n    /**\n     * @param {PDFAttachmentViewerRenderParameters} params\n     */\n    render({ attachments, keepRenderedCapability = false }) {\n      if (this._attachments) {\n        this.reset(keepRenderedCapability);\n      }\n      this._attachments = attachments || null;\n\n      if (!attachments) {\n        this._dispatchEvent(/* attachmentsCount = */ 0);\n        return;\n      }\n      const names = Object.keys(attachments).sort(function (a, b) {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      });\n\n      const fragment = document.createDocumentFragment();\n      let attachmentsCount = 0;\n      for (const name of names) {\n        const item = attachments[name];\n        const filename = getFilenameFromUrl(item.filename);\n\n        const div = document.createElement(\"div\");\n        div.className = \"treeItem\";\n\n        const element = document.createElement(\"a\");\n        if (\n          PdfFileRegExp.test(filename) &&\n          !viewerCompatibilityParams.disableCreateObjectURL\n        ) {\n          this._bindPdfLink(element, { content: item.content, filename });\n        } else {\n          this._bindLink(element, { content: item.content, filename });\n        }\n        element.textContent = this._normalizeTextContent(filename);\n\n        div.appendChild(element);\n\n        fragment.appendChild(div);\n        attachmentsCount++;\n      }\n\n      this._finishRendering(fragment, attachmentsCount);\n    }\n\n    /**\n     * Used to append FileAttachment annotations to the sidebar.\n     * @private\n     */\n    _appendAttachment({ id, filename, content }) {\n      const renderedPromise = this._renderedCapability.promise;\n\n      renderedPromise.then(() => {\n        if (renderedPromise !== this._renderedCapability.promise) {\n          return; // The FileAttachment annotation belongs to a previous document.\n        }\n        let attachments = this._attachments;\n\n        if (!attachments) {\n          attachments = Object.create(null);\n        } else {\n          for (const name in attachments) {\n            if (id === name) {\n              return; // Ignore the new attachment if it already exists.\n            }\n          }\n        }\n        attachments[id] = {\n          filename,\n          content,\n        };\n        this.render({\n          attachments,\n          keepRenderedCapability: true,\n        });\n      });\n    }\n  }\n\n  return { PDFAttachmentViewer };\n});"]}